{
  "hash": "c12ed9e05dbc6fadd8cad46b89f03c65",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Let's Get Plotting!\"\nsubtitle: \"Data Visualization, Day 1\"\nauthor: \"Sarah Parker, JP Flores, Austin Daigle\"\nformat: \n html: \n  toc: true\n---\n\n\n\n\nFor this lesson, we will be using a .bed file of genetic variants from <https://marianattestad.com/blog>. We will need to read in this data using the `read.table()` function, then rename the columns with the `name()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvariants <- read.table(\"DataVizDay1-files/variants_from_assembly.bed\", sep=\"\\t\", quote='', stringsAsFactors=TRUE,header=FALSE)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in file(file, \"rt\"): cannot open the connection\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(variants) <- c(\"chrom\",\"start\",\"stop\",\"name\",\"size\",\"strand\",\"type\",\"ref.dist\",\"query.dist\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\nLet's take a look at this dataset and what kind of research questions we could explore using this data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(variants)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\nThere are 9 different columns in this dataset, the genomic position (chrom, start, stop), name, size, strand, distance to reference (ref.dist) and distance to query (query.dist). What are some questions we could ask about this data?\n\nSome examples:\n\n-   What is the distribution of distances to the reference?\n\n-   Are the sizes of variants of different types different?\n\nWe can quickly explore questions like these by creating quick visualizations of the data.\n\n## Let's Get Plotting!\n\n**Choosing a plot type**\n\nData visualizations can tell us about the relationships of different variables in a data set. There are 3 main categories of these relationships, each answering a different type of question about the data.\n\n1.  The variation *within* a single variable\n    -   How do expression levels of a gene vary among patient samples?\n2.  The co-variation *between* a continuous and categorical variable\n    -   How does beak size compare between penguins living on different islands?\n3.  The co-variation *between* two continuous variables\n    -   How does trunk thickness relate to the age of a tree?\n\n::: {#tip-example .callout-tip}\n## Differentiating between continuous variables and categorical variables that are represented by a number\n\n-   If you can replace the number with a descriptor and it still makes sense, it is a categorical variable\n    -   you can tell R that this is a categorical variable by using `factor()` or `character()`\n\ni.e. chromosome 1 and chromosome 2 could be re-labeled as chromosome A and chromosome B or \"first chromosome\" and \"second chromosome\" without fundamentally changing the information\n\n-   If you can add/subtract two values and it still makes sense, it is a continuous variable\n\ni.e. subtracting chromosome 6 - 2 = 4, this 4 doesn't mean anything, but subtracting size 317 - 185 = 132, this means one variant is 132 bp larger than the other\n:::\n\nThere are 2 main ways we create plots in R\n\n1.  Using base R functions (i.e. `plot()`)\n\n2.  Using tidyverse functions (i.e. `ggplot()`)\n\n    -   This requires loading the `ggplot2` package with `library(ggplot2)`\n\n### Numeric vs Numeric\n\nLet's try this with a plot type you are likely very familiar with: a scatterplot\n\nA scatterplot looks at co-variation between 2 numeric variables, so what are 2 numeric variables we have in this dataset?\n\nLet's try plotting `ref.dist` vs `query.dist`:\n\n#### Base R\n\nFor base R, the `plot()` function takes in vectors of x and y values to plot.\n\nQ: How do we extract the entire column of `ref.dist` and `query.dist` from our dataset, `variants`?\n\nA: `variants$ref.dist` and `variants$query.dist`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## create a scatterplot\nplot(x = variants$ref.dist, y = variants$query.dist)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\nThat's great! But it's not easy to understand what these x and y axes are, so let's relabel them by changing the parameters `xlab` and `ylab` inside the `plot()` function call\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## create a scatterplot with better axes labels\nplot(x = variants$ref.dist, y = variants$query.dist,\n     xlab = \"Reference distance\", ylab = \"Query Distance\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\nGreat! We can also add a title and subtitle with `main` and `sub`, try this on your own!\n\nOther plot types:\n\n| Function                        | Plot Type   |\n|---------------------------------|-------------|\n| `plot()`                        | scatterplot |\n| `lines()` or `plot(type = \"l\")` | line plot   |\n\nTo plot a line on top of points, you can run `lines()` with the same data immediately following `plot()`. Notice that the line connects *all* points, leading to a bit of a jumbled mess. How do you think we can fix this?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## line plot\nplot(x = variants$ref.dist, y = variants$query.dist,\n     xlab = \"Reference distance\", ylab = \"Query Distance\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nlines(x = variants$ref.dist, y = variants$query.dist)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\n#### ggplot\n\nFor more complex layered plots, we can also use `ggplot()` from the `ggplot2` package. \"gg\" stands for \"grammar of graphics\" and plots are built a bit like sentences with different parts building on each other.\n\nTo start, let's load in the `ggplot2` package. You will only need to do this once.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## load the ggplot2 library\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(ggplot2): there is no package called 'ggplot2'\n```\n\n\n:::\n:::\n\n\n\n\nNow each time we want to make a plot, you will start by using `ggplot()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\nWe haven't given this function any data, so right now we just have an empty grey box.\n\nThe first layer we can add is the data. `ggplot()` requires the name of the dataset once, then you can just use column names throughout the rest of the code instead of using `dataset$var1`, `dataset$var2`, `dataset$var3` , etc.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(variants)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\nWe still have a grey box! Although we have told the function we want to use data from the `variants` dataset, we didn't tell it *which* data we want to use. Any time you are referencing a column name to set the position, color, size, etc. of a point, you need to wrap it inside `aes()`, which is short for \"aesthetics\". This looks something like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(variants, aes(x = ref.dist, y = query.dist))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = ref.dist, y = query.dist)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\nMore than a grey box! Now that we know which variables we are plotting and the dataset they come from, we have the framework to add the next layer: geometry. The geometry, as you might guess, refers to what type of shapes to put on the plot. Is it a line? A point? A bar? For scatterplots, we want the data represented as points, so we will use `geom_point()`.\n\nWhenever we add a `ggplot` layer, we will connect it to the current plot using a `+` sign:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_point() # plot as points\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = ref.dist, y = query.dist)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\nVoila! We have our scatterplot! Now we can continue adding layers to change things like the labels. Use the `labs()` function to change the x, y, and optionally the title and subtitle:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_point() + # plot as points\n  labs(x = \"Reference Distance\",\n       y = \"Query Distance\",\n       title = \"Plot Title\",\n       subtitle = \"Plot Subtitle\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = ref.dist, y = query.dist)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\nggplots will all follow this general formula, changing the `geom` for different plot types.\n\nOther plot types:\n\n| Function        | Plot Type                      |\n|-----------------|--------------------------------|\n| `geom_point()`  | scatterplot                    |\n| `geom_line()`   | line plot                      |\n| `geom_smooth()` | line plot of smoothed averages |\n\nTo plot a line on top of points, you can add a second geom, using `geom_point()` + `geom_line()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_point() + # plot as points\n  geom_line() + # plot as line\n  labs(x = \"Reference Distance\",\n       y = \"Query Distance\",\n       title = \"Plot Title\",\n       subtitle = \"Plot Subtitle\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = ref.dist, y = query.dist)): could not find function \"ggplot\"\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_smooth() + # plot as smooth line\n  labs(x = \"Reference Distance\",\n       y = \"Query Distance\",\n       title = \"Plot Title\",\n       subtitle = \"Plot Subtitle\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = ref.dist, y = query.dist)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\n### Numeric Distribution\n\nSometimes we want to look at the distribution or spread of values for one continuous variable. For example, in our data, what is the distribution of sizes for our variants?\n\nThere are several plot types we can use to explore this question\n\n| Plot Type    | Base R Function    | ggplot Function               |\n|--------------|--------------------|-------------------------------|\n| histogram    | `hist()`           | `geom_histogram()`            |\n| density plot | `plot(density())`  | `geom_density()`              |\n| boxplot      | `boxplot()`        | `geom_boxplot()`              |\n| violin plot  | not available      | `geom_violin()`               |\n| bar plot     | `barplot(table())` | `geom_bar(stat = \"identity\")` |\n\n::: callout-tip\nTry `?function_name()` to learn more about the different parameters used to customize each function\n:::\n\n#### Base R\n\nIn base R, we can pass each plotting function the vector of values that we want to plot. In this case, we want to plot all of the values in the `size` column of `variants`, so we will pass in `variants$size` to our plotting functions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## histogram\nhist(variants$size)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n## density plot\nplot(density(variants$size))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n\n```{.r .cell-code}\n## boxplot\nboxplot(variants$size)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\nTry adding labels and titles as described before.\n\n#### ggplot\n\nIn ggplot, we start by calling the base `ggplot()` function with the entire dataset, `variants`, then we can set the aesthetics of the x value to our column of interest with `aes(x = size)`. Then, we can add unique geoms for each plot type.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## histogram\nggplot(variants, aes(x = size)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = size)): could not find function \"ggplot\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## density\nggplot(variants, aes(x = size)) +\n  geom_density()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = size)): could not find function \"ggplot\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## boxplot\nggplot(variants, aes(x = size)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = size)): could not find function \"ggplot\"\n```\n\n\n:::\n\n```{.r .cell-code}\n## violin plot\nggplot(variants, aes(x = size)) +\n  geom_violin(aes(y = 1)) \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = size)): could not find function \"ggplot\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# violin plots are meant to compare categories, but we can tell it we only want one plot by setting the aesthetic of `y` to the value 1\n```\n:::\n\n\n\n\nTry adding labels and titles described before. You can also easily change the look of ggplots with different themes, try adding `theme_` and look at the different autofill options. See more about built-in themes [here](https://ggplot2.tidyverse.org/reference/ggtheme.html) and more ways to customize themes [here](https://ggplot2.tidyverse.org/reference/ggtheme.html).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(variants, aes(x = size)) +\n  geom_density() +\n  theme_classic()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = size)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\n### Continuous vs Categorical\n\nSometimes we want to see how the counts or the distribution of a continuous variable change between different categorical groups. Often, we use a barplot for this, but there are several other plot types we can use\n\n| Plot Type    | Base R Function                             | ggplot Function  |\n|------------------------|------------------------|------------------------|\n| bar plot     | `barplot(name = cat_var, value = cont_var)` | `geom_bar()`     |\n| boxplots     | `boxplot(cont_var ~ cat_var)`               | `geom_boxplot()` |\n| violin plots | not available                               | `geom_violin()`  |\n\nwhere `cont_var` is the continuous variable and `cat_var` is the categorical variable.\n\n#### Base R\n\nIn base R, if we want to plot a numeric by a categorical variable, we will use the `~` symbol to represent \"by\"\n\nFor example, if we wanted to plot size by strand, we would do\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(variants$size ~ variants$type)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(predvars, data, env): object 'variants' not found\n```\n\n\n:::\n:::\n\n\n\n\nTo make a barplot, we have to first count how many instances there are of each category using the `table()` function. First, we start with subsetting our data to only the columns we are interested in, then we pass this smaller dataset into the `table()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# subset all rows, only column \"type\"\nsmallData <- variants[,\"type\"]\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variants' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nvariantsCount <- table(smallData)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'smallData' not found\n```\n\n\n:::\n:::\n\n\n\n\nThen, we use the `barplot()` function, setting the `height` of bars to the counts in the new table, and the `name` of the bars to the names of the table. The height of the bars is the total summed size for each variant type.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(height = variantsCount, names = names(variantsCount))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'variantsCount' not found\n```\n\n\n:::\n:::\n\n\n\n\n#### ggplot\n\nWhen using ggplot, the total counts per category will be calculated for us. So, we can create a base plot, setting x to the categorical variable and y to the continuous variable, then add `+geom_boxplot()` to make a boxplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## density\nggplot(variants, aes(x = type, y = size)) +\n  geom_boxplot()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = type, y = size)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\nTo make a barplot, we need to give it a bit more information. The height of the barplot is based on certain statistics, such as sum or mean. Since these are summary statistics, we will add `stat = \"summary\"` and `fun = \"mean\"` if we want the bar height to relate to the means of each category. How does this compare to the sums?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## boxplot\nggplot(variants, aes(x = type, y = size)) +\n  geom_bar(stat = \"summary\", fun = \"mean\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(variants, aes(x = type, y = size)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\n\n\n## Additional Resources\n\nTry changing the colors using one of these tutorials:\n\n<http://www.sthda.com/english/wiki/wiki.php?title=ggplot2-colors-how-to-change-colors-automatically-and-manually>\n\n[https://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love](https://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love/#:~:text=Change%20ggplot%20colors%20by%20assigning,or%20to%20the%20fill%20arguments.)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}