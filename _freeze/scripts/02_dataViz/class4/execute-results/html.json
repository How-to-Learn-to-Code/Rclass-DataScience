{
  "hash": "caf20f18cf28fcf57b5c476c11f469e7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Applying Visualization Methods\nsubtitle: \"Data Visualization, Day 2\"\nauthor: \"Austin Daigle\"\nformat: \n  html: \n    toc: true\n---\n\n::: {.cell}\n\n:::\n\n\n## Introduction\n\nWelcome to Day 2 of our data visualization journey! Today, we'll dive deeper into the world of visualizing data using the **Palmer Penguins dataset**. This dataset provides insights into penguins in the Palmer Archipelago, and it's a perfect opportunity for us to practice and hone our visualization skills.\n\n-   This session is an opportunity to:\n    -   Independently code visualizations.\n    -   Learn how to troubleshoot issues that arise.\n    -   Explore data in a hands-on manner.\n-   We will also teach several new data visualization tricks:\n    -   Changing shapes of points.\n    -   Customizing figure legends.\n    -   Using `facet_grid` for comparing many aspects of data simultaneously.\n    -   Other advanced plotting tricks.\n-   Approach this session with curiosity and an adventurous spirit:\n    -   Experiment with different plot types.\n    -   Play with colors and styles.\n    -   Let creativity guide your visual storytelling.\n-   Questions are welcome. Let's make some pretty pictures!\n\n![The Palmer Archipelago penguins. Artwork by \\@allison_horst.](DataVizDay2-files/lter_penguins.png) The Palmer Archipelago penguins. Artwork by @allison_horst.\n\n## Objectives of Data Visualization: Class 2\n\n-   Apply objectives from Class 1 to a new dataset\n\n-   Create a plot from (almost) scratch, using tools (Google, Stack Overflow) to help you\n\n-   Get a feel for the differences between creating plots in Base R and `ggplot`.\n\n## Dataset Overview\n\nFirst we load necessary packages. If the `palmerpenguins` package is not installed, we can install it by un-commenting \"install.packages\" below.\n\n::: {.callout-tip title=\"Tip -- Suppress Package Startup Messages\"}\nThe `suppressPackageStartupMessages()` function in R is used to prevent the display of startup messages when loading packages. This can make your R script output cleaner and more readable, especially when loading multiple packages.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressPackageStartupMessages(library(tidyverse))\n#install.packages('palmerpenguins')\nlibrary(palmerpenguins)\n```\n:::\n\n\nThe dataset includes measurements of three penguin species: Adélie, Chinstrap, and Gentoo. The `palmerpenguins` package automatically loads the data into an object called penguins.\n\nFirst we check the data class of penguins with `class()`, and take a look at the first few rows using `head()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#what class is our data\nclass(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\nAs we can see, the dataset, which is a tibble/dataframe, contains many numerical (lengths, depths, and masses), and categorical (species, island, and sex) variables. It also contains a variable that could be categorical or numerical (year).\n\n## Exploratory Questions\n\nIn this section, we will take some time to ask questions about the Palmer Penguins dataset. Asking questions is a fundamental part of data analysis, as it guides our exploration and helps us uncover interesting patterns and insights.\n\nConsider the different types of questions you might ask to learn more about this dataset. What questions can we answer using different data types, and what kind of plots might we use to answer them?\n\n### Some example questions\n\nIf you are having trouble of thinking of questions on your own, here are some example questions related to different combinations of numerical or categorical variables:\n\n::: {.callout-note collapse=\"true\" title=\"Questions leading to numerical by numerical plots\"}\n-   How does flipper length vary with body mass among different penguin species? This question explores correlations and possible factors influencing these traits.\n\n-   Is there a relationship between the bill depth and flipper length, and does this relationship vary by species? This encourages explores multiple numerical variables and consider biological implications. Since we are comparing species, additional visualization tools like coloring points by species could aid or visualization.\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Questions leading to categorical by numerical plot\"}\n-   How does the average body mass differ across penguin species? This question will lead to examining differences between groups.\n\n-   Does the distribution of flipper lengths differ by the island on which the penguins were observed? This question could be answered by a visauization of several separate distributions, which could overlap with each other.\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Questions related to one numerical variable\"}\n-   What is the distribution of bill lengths in the Palmer Penguins dataset, and what might this tell us about their feeding habits?\n\n-   How are body mass values distributed within each species, and what does this suggest about the health or environment of these populations?\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Questions related to multiple categorical variables\"}\n-   How do the relationships between body mass and flipper length change over different years of data collection?\n\n-   Can we observe any noticeable trends in bill dimensions on different islands, and how do these trends compare across species?\n\n-   These questions require the comparision of multiple categories of variables, and could be usefully displayed as separate plots side-by-side. We will use the tool facet_grid at the end of this lesson to approach such questions.\n:::\n\n## Making plots!\n\n### Warm up: numerical by numerical plots\n\nTo compare two numerical variables, a scatterplot is often the simplest and most effective plotting method. Here, we will compare the flipper length and body mass of our penguins. Remember, the inputs to a scatterplot are the columns of our tibble, which should be numeric, integer, or double vectors. Lets take a look at our data with `head()` and confirm the datatype with `class()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(penguins$flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 181 186 195  NA 193 190\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(penguins$flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n### ggplot\n\nFirst we create a simple scatterplot with x and y labels in base r.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#simple ggplot plot with x and y axis labeled\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g,)) +\n  geom_point() +\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/numvsnum2_ggplot-1.png){width=672}\n:::\n:::\n\n\nCan we compare different species in these plots? Let's color our points based on the species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# color dots by species\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\",\n       color = \"Species\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/num_vs_num_species_ggplot-1.png){width=672}\n:::\n:::\n\n\n### base R\n\nFirst we create a simple scatterplot with x and y labels in base r.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#simple base r plot with x and y axis labeled\nplot(penguins$flipper_length_mm, penguins$body_mass_g,\n     xlab = \"Flipper Length (mm)\", ylab = \"Body Mass (g)\")\n```\n\n::: {.cell-output-display}\n![](class4_files/figure-html/numvsnum2-1.png){width=672}\n:::\n:::\n\n\nCan we compare different species in these plots? Let's color our points based on the species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# color dots by species\nplot(penguins$flipper_length_mm, penguins$body_mass_g,\n     xlab = \"Flipper Length (mm)\", ylab = \"Body Mass (g)\",\n     col = penguins$species) \n```\n\n::: {.cell-output-display}\n![](class4_files/figure-html/num_vs_num_species-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-note title=\"Why are colors specified differently in base R and ggplot?\"}\n-   In base R plotting, the color for each point is specified directly within the `plot()` function using the col argument. This argument can take a vector of colors, which will be applied to the points in the plot. In this example, we are passing the species information directly to the col argument to color the points based on the species.\n\n-   In ggplot2, the aesthetics (aes) of the plot are defined within the `aes()` function. The color aesthetic is specified inside the `aes()` function to map the species variable to the colors of the points. This approach follows the grammar of graphics philosophy, where data properties are mapped to visual properties in a structured way.\n\n-   Both methods allow us to compare different species in the plots by coloring the points based on the species. However, the ggplot2 approach is generally more flexible and powerful for creating complex visualizations.\n:::\n\n#### Another way to change the colors in a ggplot--local aesthetics\n\nIn `ggplot2`, the `aes()` function is used to map data variables to visual properties (aesthetics) of the plot. The placement of the `color` specification can vary based on whether it is applied globally or locally.\n\n-   Global aesthetics apply to all geoms in the plot, and are added in the initial `ggplot()` call (or in a stand-alone `aes()` layer).\n\n-   Local aesthetics apply only to the geom to which they are added.\n\nThis first plot produces the same output as our original plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species)) +\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\",\n       color = \"Species\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/local_aesthetics-1.png){width=672}\n:::\n:::\n\n\nIn this second plot, the local aesthetic overrides the global one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point(aes(color = flipper_length_mm)) + # local aesthetic applied here\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\",\n       color = \"Species\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/local_aesthetics2-1.png){width=672}\n:::\n:::\n\n\n#### Let's customize our plots!\n\nLet's customize these plots some more! Here we challenge you to change the shapes of the points for each species, add a customized legend in the position of the plot we want, and change the size of the points.\n\nTake 5-10 minutes to try to figure out one or more of the changes we made to the plot:\n\n-   **Change the shape of the points** based on species.\n-   **Add custom colors** for the different species.\n-   **Change the position of the legend** to make it more visually pleasing.\n-   **Add a subtitle** to the figure.\n\nFeel free to try ggplot or base R, depending on your preference. Practice finding this information using:\n\n-   The [base r docs for the `plot()` function](https://rdrr.io/r/base/plot.html) or [ggplot2 docs](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)\n\n-   Use Google to find informative articles online [like this](https://www.statology.org/ggplot-legend-position/)\n\n-   Ask a friend or instructor for help if you get stuck.\n\nFeel free to add your own touches to the figure, and experiment with changing the numbers and variables in the figure!\n\n::: panel-tabset\n### ggplot\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n### base r\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](class4_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"Code used to make the plot--try on your own first!\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Even more complex example with custom labels, colors, and fig legend position\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species), size = 3) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       subtitle = \"Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\") +\n  theme(legend.position = c(0.9, 0.1))\n\n#Similar figure using base R\nspecies_colors <- c(\"darkorange\", \"purple\", \"cyan4\")\n\nplot(penguins$flipper_length_mm, penguins$body_mass_g,\n     xlab = \"Flipper Length (mm)\", ylab = \"Body Mass (g)\",\n     main = \"Penguin size, Palmer Station LTER\",\n     sub = \"Flipper length and body mass for Adelie, Chinstrap, and Gentoo Penguins\",\n     pch = as.numeric(penguins$species), # Assign shapes based on species\n     col = species_colors[penguins$species]) # Assign colors based on species\n\n# Add legend\nlegend(\"bottomright\", legend = levels(penguins$species),\n       col = species_colors, \n       pch = 1:3, #shape codes to legend\n       title = \"Penguin species\")\n```\n:::\n\n:::\n\n## Time to practice!\n\nIn this section, you'll have the chance to make more plots on your own. We'll display different plots with several new features to try, and you can use your plotting and researching skills to recreate them. This is a great opportunity to experiment and be creative. Remember, questions are always welcome.\n\n### Numerical by categorical plots\n\nTry making some numerical by categorical plots on your own using this dataset! This example looks at body mass in each species, using \"jittered\" points. See if you can recreate this on your own!\n\n::: {.callout-tip collapse=\"true\" title=\"Hint -- a reminder of the basic syntax for boxplots\"}\n::: panel-tabset\n## ggplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ggplot boxplot of body mass values in each species\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3) +\n  labs(x = \"Species\",\n       y = \"Body mass (g)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/boxplot_ggplot-1.png){width=672}\n:::\n:::\n\n\n## base r\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base R boxplot of body mass values in each species\nboxplot(body_mass_g ~ species, data = penguins,\n        col = c(\"darkorange\", \"purple\", \"cyan4\"),\n        main = \"Body Mass by Penguin Species\",\n        xlab = \"Species\",\n        ylab = \"Body Mass (g)\")\n```\n\n::: {.cell-output-display}\n![](class4_files/figure-html/boxplot-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n::: panel-tabset\n## ggplot\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## base r\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](class4_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"How to recreate this plot--try on your own first!\"}\nWhat if we also want to see individual points in a distribution? We can add points with \"jitter\" -- a small amount of random variation on the x-axis -- to better visualize where the points fall.\n\nIn ggplot2, you can use the `geom_jitter()` function to add jittered points to your plot. This adds a small amount of random noise to each point, making it easier to see overlapping points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# overlay the raw data points using geom_jitter\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +\n  geom_jitter(aes(color = species), alpha = 0.5, show.legend = FALSE, \n     position = position_jitter(width = 0.2)) +\n  labs(x = \"Species\",\n       y = \"Body mass (g)\")\n```\n:::\n\n\nIn base R, you can achieve a similar effect using the `jitter()` function. This function adds a small amount of random variation to the data points, making overlapping points more distinguishable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the boxplot\nboxplot(body_mass_g ~ species, data = penguins,\n        col = c(\"darkorange\", \"purple\", \"cyan4\"),\n        main = \"Body Mass by Penguin Species\",\n        xlab = \"Species\",\n        ylab = \"Body mass (g)\")\n\n# Add overlaid points (jittered). Factor controls the width of the points\\\n#cex controls their size, and pch controls the symbol\npoints(jitter(as.numeric(penguins$species), factor = 1.5),\n       penguins$body_mass_g,\n       pch = 16, cex = 0.8)\n\n# Add custom legend (optional)\nlegend(\"bottomright\", legend = levels(penguins$species),\n       fill = c(\"darkorange\", \"purple\", \"cyan4\"),\n       title = \"Penguin species\")\n```\n:::\n\n:::\n\n### Plotting the distribution of a numerical variable\n\nIf we want to loot at the distribution of one numerical variable in detail, we could use a histogram. Here is an example of histograms that show us the distributions of each species, using new features like partially transparent colors and custom bar widths.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\" title=\"Hint -- a reminder of the basic syntax for histograms\"}\n::: panel-tabset\n## ggplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a simple histogram of flipper length in ggplot\nggplot(data = penguins, aes(x = bill_depth_mm)) +\n  geom_histogram() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/histogram2-1.png){width=672}\n:::\n:::\n\n\n## base r\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simple histogram of flipper length\nhist(penguins$bill_depth_mm, main = \"Histogram of Penguin Bill Depth\", xlab = \"Bill Depth (mm)\")\n```\n\n::: {.cell-output-display}\n![](class4_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n::: {.callout-tip collapse=\"true\" title=\"How do we change bin widths for histograms?\"}\n::: panel-tabset\n## ggplot\n\nIn ggplot2, you can change the number of bins in a histogram using the bins argument within the `geom_histogram()` function. Alternatively, you can use the binwidth argument to specify the width of each bin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = body_mass_g)) +\n  geom_histogram(bins = 30) +\n  labs(x = \"Body Mass (g)\", y = \"Frequency\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/widths2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = bill_depth_mm)) +\n  geom_histogram(binwidth=0.5) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/widths2-2.png){width=672}\n:::\n:::\n\n\n## base r\n\nIn base R, you can change the number of bins in a histogram using the breaks argument in the `hist()` function. This argument allows you to specify the number of bins directly, or you can pass a vector of break points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#change the number of bins to your liking \nhist(penguins$bill_depth_mm, breaks = 30, main = \"Histogram of Penguin Bill Depth\", xlab = \"Bill Depth (mm)\")\n```\n\n::: {.cell-output-display}\n![](class4_files/figure-html/widths-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n#### Challenge plot\n\nCan we **find the means** of these distributions and plot the means on our histograms? Additionally, can we **add text** to clearly display the mean values on the plot?\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\" title=\"Code for this image\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the mean bill depth for each species\n# This requires some skills we will learn in Week 3!\nmean_depth <- penguins %>%\n  group_by(species) %>%\n  summarize(mean_bill_depth = mean(bill_depth_mm, na.rm = TRUE))\n\n# add a line representing the mean to the histogram\nggplot(penguins, aes(x = bill_depth_mm, fill = species)) +\n  geom_histogram(aes(fill = species), alpha = 0.5, position = \"identity\") +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Flipper length (mm)\",\n     y = \"Frequency\",\n     title = \"Penguin flipper lengths\")+\n  geom_vline(data = mean_depth, aes(xintercept = mean_bill_depth),\n     color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_text(data = mean_depth, aes(x = mean_bill_depth, y = c(15,10,15),\n     label = paste(species, \"mean:\", round(mean_bill_depth, 2))),\n     color = \"black\", vjust = -0.5, \n     hjust = 0.5, size = 4) \n```\n:::\n\n:::\n\n## Mini-Lesson: Introduction to facet_grid in ggplot2\n\n### Background:\n\nIn data visualization, particularly when dealing with complex datasets, it's beneficial to compare subsets of data across different categories simultaneously. ggplot2 provides various functions for creating faceted plots, with **`facet_grid`** being a prominent choice for creating grids that can help in exploring interactions between variables.\n\n### Faceting:\n\nFaceting refers to the strategy of splitting one plot into multiple plots based on a factor (or factors) included in the dataset. Each plot represents a level of the factor(s) and shares the same axis scaling and grids, which makes them easy to compare.\n\nThe `facet_grid` function creates a matrix of panels defined by row and column faceting variables. The general syntax is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfacet_grid(rows ~ cols)\n```\n:::\n\n\nIf we just want to facet by rows or just by columns, replace that spot with a \".\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#facet by rows\nfacet_grid(rows ~ .)\n#facet by cols\nfacet_grid(. ~ cols)\n```\n:::\n\n\nLets take some of the plots we made earlier and facet them by the categorical variable year! Note that in some situations it makes more sense to facet by columns, and others by rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plots with facet_grid\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species), size = 3) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       subtitle = \"Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position = c(0.9, 0.1), # x and y on a relative scale (0-1)\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\") +\n  facet_grid(. ~ island) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/facet_grid-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Boxplots with facet_grid\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +\n  geom_jitter(aes(color = species), alpha = 0.5, show.legend = FALSE, position = position_jitter(width = 0.2)) +\n  labs(x = \"Species\",\n       y = \"Body mass (g)\") +\n  facet_grid(. ~ year) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\nRemoved 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/facet_grid-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Histograms with facet_grid for year\nggplot(penguins, aes(x = bill_depth_mm, fill = species)) +\n  geom_histogram(aes(fill = species), \n     alpha = 0.5, \n     position = \"identity\",\n     binwidth=0.5) +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Flipper length (mm)\",\n     y = \"Frequency\",\n     title = \"Penguin flipper lengths\")+\n  geom_vline(data = mean_depth, aes(xintercept = mean_bill_depth),\n     color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_text(data = mean_depth, aes(x = mean_bill_depth, y = c(10,7,5,10,7,5,10,7,5),\n     label = paste(species, \"mean:\", round(mean_bill_depth, 2))),\n     color = \"black\", vjust = -0.3, hjust = 0.5, size = 4) +\n  facet_grid(year ~ .) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/facet_grid-3.png){width=672}\n:::\n:::\n\n\n## A useful package to make your plots colorblind friendly\n\nSometimes the plots we create are pretty, but our colorblind friends cannot see the relationships we are trying to show with them. The **viridis** package allows you to select from several beautiful colorblind friendly palettes and easily incorporate them into ggplots using `scale_color_viridis()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"viridis\")\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: viridisLite\n```\n\n\n:::\n\n```{.r .cell-code}\n# Scatter plots with facet_grid\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = flipper_length_mm, shape = species), size = 3) +\n  scale_color_viridis() + #scale_color_viridis_d is for discrete variables like species\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\",\n       color = \"Flipper length\",\n       shape = \"Penguin species\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/viridis-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species), size = 3) +\n  scale_color_viridis_d(option=\"plasma\") + #try a new color scheme\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](class4_files/figure-html/viridis-2.png){width=672}\n:::\n:::\n\n\n# Conclusion\n\nAs we wrap up our exploration of data visualization, remember that the choices you make in your visualizations should be driven by the relationships you want to highlight in your data, while avoiding dishonest manipulation of the data. Before you start creating your plots, take a moment to think about what you want to understand or communicate about your data. This will guide your decisions on which aesthetics to use, how to customize your plots, and what story you want your data to tell.\n\n## Key Takeaways:\n\n-   **Purpose-Driven Visualizations**: Always have a clear idea of the relationships and insights you want to highlight with your data. This focus will help you make more intentional and impactful visualizations.\n-   **Customization**: Don't be afraid to experiment with different aesthetics and customization options. Small tweaks can significantly enhance the clarity and appeal of your plots.\n-   **Clarity and Simplicity**: Aim for clarity in your visualizations. Make sure your plots are easy to read and interpret, with well-labeled axes, legends, and titles.\n-   **Consistency**: Maintain a consistent style across your visualizations to create a cohesive and professional look.\n-   **Integrity**: Ensure your visualizations are honest and accurate. Avoid manipulative practices that could mislead viewers or misrepresent the data.\n\nData visualization is both an art and a science. As you continue to practice and explore different techniques, you'll develop a deeper understanding of how to effectively communicate your data insights. Keep experimenting, learning, and refining your skills.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Happy plotting!](DataVizDay2-files/ggcats.gif){fig-align='center' width=70%}\n:::\n:::\n\n\n## Some useful, free resources\n\n-   Learn how to make almost any plot type in ggplot or base r: <https://r-coder.com/>\n-   Detailed description of ggplot functions by the authors: <https://ggplot2.tidyverse.org/articles/ggplot2.html>\n-   Take a deep dive on the theory behind ggplot2: <https://ggplot2-book.org/>\n-   A cookbook with basic set up and explanations for various plot types in base r and ggplot: <https://r-graphics.org/>.\n-   Friends Don't Let Friends Make Bad Graphs: <https://github.com/cxli233/FriendsDontLetFriends>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}