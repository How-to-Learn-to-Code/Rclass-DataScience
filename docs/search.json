[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How To Learn to Code : R for Data Science",
    "section": "",
    "text": "Preface\nWelcome to How to Learn to Code!!\nWe are an organization that hopes to make learning to program approachable, accessible, and effective. We want to improve rigor and reproducibility in science by providing programming resources and experiences to scientists and professionals in all levels of their careers. Our classes are small-group based courses with a teacher:student ratio that allows the students to learn dynamically and independently. During classes, students are able to follow along with the teacher leading the instruction, or work with one of our floating teachers to troubleshoot or to better understand their own code.\nThis is our curriculum for learning R programming in the context of data analysis. Our curriculum development team has worked tirelessly to develop this new curriculum for the Summer of 2024. We are constantly improving and updating our curricula, so if you’re interested in contributing or have suggestions, please visit https://howtolearntocode.web.unc.edu/ for our most up-to-date contact information. If you have gotten to our Class 7 over Github, or are proficient in Github yourself, feel free to submit an issue or pull request at https://github.com/How-to-Learn-to-Code/Rclass-DataScience.\n\nTable of Contents\n\n\nClass Day\nTopic\nLink\n\n\n\n\n0\nWelcome to How to Learn to Code!\nIntroduction\n\n\n1\nR Coding Basics\nCoding Basics 1\n\n\n2\nApplying Coding Basics\nCoding Basics 2\n\n\n3\nLet’s Get Plotting!\nData Visualization 1\n\n\n4\nApplying Visualization Methods\nData Vizualization 2\n\n\n5\nData Wrangling Basics\nData Wrangling 1\n\n\n6\nData Wrangling with Real Experimental Data\nData Wrangling 2\n\n\n7\nRunning a Reproducible Analysis\nProject 1\n\n\n8\nPracticing on Real World Data\nProject 2",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "class0.html",
    "href": "class0.html",
    "title": "Welcome to How to Learn to Code!",
    "section": "",
    "text": "Introduction\nThis page will walk you through setting up access to UNC’s computing cluster and introduce you a bit to R and R Studio so we can hit the ground running in the first class. To ensure you have access to the UNC cluster (and thus able to participate in class), please review this document in full at least 24 hours in advance of the first class–Research IT will need time to approve your account request.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#class-0-objectives",
    "href": "class0.html#class-0-objectives",
    "title": "Welcome to How to Learn to Code!",
    "section": "Class 0 Objectives",
    "text": "Class 0 Objectives\n\nRequest a Longleaf account\nLaunch an R Studio session on OnDemand\nKnow what each of the four panels in R Studio show",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#r-vs.-r-studio",
    "href": "class0.html#r-vs.-r-studio",
    "title": "Welcome to How to Learn to Code!",
    "section": "R vs. R Studio",
    "text": "R vs. R Studio\nIn this class, you’ll hear these two terms a lot. They sound similar, but they are actually very different! R is the programming language we will be learning in this class. R Studio is a user-friendly interface (or IDE, integrated development environment) we will be using to write scripts in R and interact with R software.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#longleaf",
    "href": "class0.html#longleaf",
    "title": "Welcome to How to Learn to Code!",
    "section": "Longleaf",
    "text": "Longleaf\n“Longleaf” is the name for UNC’s computing system. Researchers in all departments across UNC use it to run analyses, store data, and use programs that require GPUs. Whenever someone says they are “on Longleaf” or “running code on Longleaf” it means their personal computer is connected to the cluster and they are either actively interacting with a program running on the cluster (we will be doing this with R Studio!) or writing code that tells the cluster to perform certain tasks whenever it has the memory availability.\nBefore the first class, you will need to request access to Longleaf. Follow the instructions on the Research IT website. In addition to your onyen and email address, you’ll need the following information:\n\nPreferred shell: bash\nFaculty sponsor name and onyen: You can put your PI here, or if you do not have a PI, leave blank.\nType of subscription: Longleaf\nDescription of work you will do on the cluster: How to Learn to Code R class\n\nIt may take ~24 hours before your account is approved.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#ondemand",
    "href": "class0.html#ondemand",
    "title": "Welcome to How to Learn to Code!",
    "section": "OnDemand",
    "text": "OnDemand\nOnDemand is a web portal that allows you to access Longleaf. We will be using OnDemand to launch R Studio and run R code. You will need to have your Longleaf account approved before accessing OnDemand.\nTo launch OnDemand, navigate to this site in a browser of your choice: https://ondemand.rc.unc.edu (you may want to bookmark this site, you’ll be accessing it for each class).\nOnce you’ve logged in, you’ll see a page like this. Click on the RStudio Server tile.\n\n\n\n\n\nThis will take you to a page where you can fill out some parameters for your R Studio Server session. The only one you’ll need to adjust is “Number of hours” where you should put “2”.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can request up to 10 hours, but it’s good practice to only request the amount of time you’ll need (Longleaf is a shared resource!). Since each class is 90 minutes, you’ll likely only need to request 2 hours for each class. Under “Additional job submission arguments” you adjust the amount of memory requested. This won’t be needed for How to Learn to Code classes, but may be needed when you are running your own analyses on large datasets in the future.\n\n\nAfter you’ve filled out the appropriate information, click Launch. This will take you to the “My Interactive Sessions” page. Your session request may be queued for a minute while space on the cluster is being allocated for your session. Once it’s ready, click “Connect to R Studio Server”. This will launch R Studio in a new tab.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#navigating-r-studio",
    "href": "class0.html#navigating-r-studio",
    "title": "Welcome to How to Learn to Code!",
    "section": "Navigating R Studio",
    "text": "Navigating R Studio\nYour R Studio window is divided into four panes. You can adjust the sizes of each pane (horizontally and vertically) by dragging the outer edges.\n\n\n\n\n\n\nNote\n\n\n\nYou may only see three panes when you first launch R Studio. If that’s the case, go to File &gt; New File &gt; R Script.\n\n\n\n\n\nimage: https://docs.posit.co/ide/user/ide/guide/ui/ui-panes.html\n\n\nThe top left pane is called the Source and this is where you will be writing and editing code. Writing code here does not automatically execute or run it. To do that, you will need to use the Console pane in the bottom left. There are a few ways to get code written in the Source pane to the Console pane, in order from least efficient to most efficient:\n\nCopying the line of code you want to run and pasting it into the console and then hitting the “return” or “enter” key.\nPutting your cursor anywhere in the line of code you want to run and clicking “Run” in the upper right section of the Source pane\nHighlighting the line of code (or section of code) you want to run and clicking “Run” in the upper right section of the Source pane\nPutting your cursor anywhere in the line of code you want to run, highlighting the line of code, or highlighting the section of code you want to run and pressing Alt + Enter (for PC) or cmd + return (for Mac)\n\nAny code written in the console is not saved anywhere. Generally, people write their code in the Source pane, and then run it as needed in the Console. This is important to remember when writing reproducible code–all code needed to run your analyses, generate plots, etc. should be written in the source (which is then saved as an R script). Throughout this course, you will likely want to ensure that the code you write during each class is saved in a separate R script.\nThe Environments pane shows current saved objects, but also has tabs to show history (all commands executed in your current session) and connections (if you connect to any local or remote databases). You will almost exclusively be using the Environment tab. The Output pane is in the bottom right and shows outputs of code such as plots. It also has tabs for files (an interactive file explorer), packages (which shows currently installed R packages), and help (which shows package documentation). You will likely be using the Plots and Help tabs the most.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#running-code",
    "href": "class0.html#running-code",
    "title": "Welcome to How to Learn to Code!",
    "section": "Running code",
    "text": "Running code\nTry running the below line of code using one of the four ways described above. First, copy the below line of code and paste it into the Source pane.\nprint(\"hello world!\")\nBefore executing the code, your Source and Console panes will look like this:\n\n\n\n\n\nAfter executing the line of code, your source pane will look like this:\n\n\n\n\n\nCongrats! You just ran your first line of code. If you want to save your script (what’s written in the source pane) go to File &gt; Save as and save your script with a helpful name in a location that makes sense (e.g., maybe in a folder called “H2L2C_class” and name the script “hello_world.R”).\nReview the rest of the information on this page before Class 1, but don’t worry if it doesn’t make sense right away. We will be going over some of it in the first class and touching on it throughout the course.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#talking-like-an-r-user",
    "href": "class0.html#talking-like-an-r-user",
    "title": "Welcome to How to Learn to Code!",
    "section": "Talking like an R user",
    "text": "Talking like an R user\nBelow is some jargon that you may hear during class. Don’t worry about memorizing it all before Class 1! Just know that it’s here so if you are ever wondering what a term means you will know where to look.\nRunning code/run this line/execute: Telling R to perform the command given in a console. If someone says “run this line of code” that means to send it to the console (either by copying/pasting or using one of the shortcuts mentioned previously).\nData types: Data types in R include numeric, logical, and character. There are a few more, but those are the main three. We will touch on these more in Classes 1 and 2.\nVector: A series of values of any data type. A vector is created using the c() function (c for combine/concatenate).\nFactors: This is the R term for categorical data. Sometimes R will automatically treat data as categorical (especially if it is a character type), but not always. You can coerce other data types (like numeric) to factors using using the factor() function and specifying the order using the levels argument. For more information on factors, see this page in the R for Data Science book.\nData frame: The best way to think of data frames is a spreadsheet. Technically, they are composed of vectors. Typically the rows in a data frame will correspond to observations and the columns will correspond to variables describing those observations. Data in a data frame can be of different types–i.e. you can have one column be character (maybe describing hair color for each observation) and another be numeric (maybe describing height for each observation).\nMatrix: A matrix in R is very similar to a data frame. Unlike a data frame, all elements must be of the same data type.\nFunctions: A function performs a given task. This task can be very simple (add two numbers) or more complex (create a large data frame, run a linear regression, save the output to a csv file). R has many built-in functions you will use. Many packages also have functions you can use.\nPackages: Packages in R are extensions of what is called “base R.” Base R refers to using R without any add-ons (i.e., no packages). Packages can have data, functions, and/or compiled code. It is the responsibility of package developers to maintain their package–which means some undergo frequent updates and some haven’t been touched in years (and thus might not work anymore for whatever reason). It also means that some packages can have bugs or might not be appropriate for your data/analysis. To use a package, you will first need to install it using the function install.package(\"&lt;package_name&gt;\"). You will only need to install the package once. Each time you want to use the package, you’ll need to load it into your environment: library(&lt;package_name'). Once it is loaded into your environment, you will be able to use any functions or data in the package.\nglobal vs. local: Global refers to something (usually a variable) that is accessible to the entire program/code. Local refers to something (usually a variable) that is accessible only relative to something else (such as within a specific code block, like a function).\n\n# Global variable\nx &lt;- \"airplane\"\n# Function that defines a local variable\nmy_function &lt;- function() {\n    y &lt;- \"car\"\n}\n# Accessing the local variable outside the function returns an error\ny\n# But the global variable is accessible\nx\n# Accessing the local variable \nz &lt;- my_function()\nz\n\ndirectory: A directory is another term for what you may refer to as a “folder” on your computer.\npaths: Paths are the directions to files and folders on your system. Understanding paths is important for reading your data into your R environment, since you will need to tell R where the file is located. You can have global and local paths. Global paths are sort of like the full set of instructions starting from your home base. Local paths are instructions given a certain starting location. Here’s an example of a global path to an example file on Longleaf: /work/users/g/h/goheels/my_project/my_data.csv. Here’s an example of a local path, given the starting spot of the goheels directory: my_project/my_data.csv.\nsyntax/style: The visual appearance (spaces, indentations, capitalization) of your code greatly improves readability and makes it easier for someone else to quickly understand what it’s doing (or you six months later). In this class, we will follow the Tidyverse Style Guide and encourage you to reference it during class to ensure you are consistently naming variables and using appropriate syntax. The sections most relevant for now are Files, Syntax, and the “Comments” section of the Functions page. Later classes will touch on pipes and ggplot2.\nConditionals: A conditional is a line of code that will run only if a particular condition is met. You can recognize these by the use of “if” “else” or “while”. The best way to understand these is by actually reading the code out loud. If you were to read the below example out loud, you might say “if x equals 3, print ‘condition is met’, else print ‘condition is not met’”. What do you think will happen if x == 3? What if x == 4?\n\nif(x == 3) {\n  print(\"condition is met\")\n} else {\n  print(\"condition is not met\")\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#understanding-errors-and-warnings",
    "href": "class0.html#understanding-errors-and-warnings",
    "title": "Welcome to How to Learn to Code!",
    "section": "Understanding errors and warnings",
    "text": "Understanding errors and warnings\nYou will get lots of errors during your How to Learn to Code Journey. “Warnings” indicate your code ran, but some non-fatal issue arose. Sometimes these are OK to ignore, sometimes they indicate an issue you need to look into further. Either way, they should always be investigated! “Errors” are fatal issues and may be the result of things like syntax errors, typos, and incorrect data types. A good starting point for investigating any error or warning is Google (chances are quite high someone has run into the same issue, especially when you’re just learning how to code). You can copy and paste the entire error/warning into Google and usually return a helpful result.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#use-of-ai-tools",
    "href": "class0.html#use-of-ai-tools",
    "title": "Welcome to How to Learn to Code!",
    "section": "Use of AI tools",
    "text": "Use of AI tools\nUsing AI tools such as ChatGPT and Microsoft Copilot can be really helpful! But before turning to these tools for assistance, try figuring out the solution yourself. Part of learning how to code is learning how to think like a coder, and that requires doing things the hard way for a bit. Remember that you are responsible for understanding what your code is doing and why, and that the output is accurate. Additionally, depending on the type of work you are doing, you many need to use additional caution when copying and pasting code/data (any questions/concerns on this should be directed to your PI/department).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#im-stuck-additional-resources",
    "href": "class0.html#im-stuck-additional-resources",
    "title": "Welcome to How to Learn to Code!",
    "section": "I’m stuck! Additional resources",
    "text": "I’m stuck! Additional resources\nResearch IT page on how to use OnDemand: https://help.rc.unc.edu/ondemand\nGetting started on Longleaf: https://help.rc.unc.edu/getting-started-on-longleaf\nMore stats please! https://odum.unc.edu/education/short-courses/#course1\nStill haven’t found what you’re looking for? Post a message in the How to Learn to Code Teams!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class0.html#bonus-installing-r-studio-on-your-personal-computer",
    "href": "class0.html#bonus-installing-r-studio-on-your-personal-computer",
    "title": "Welcome to How to Learn to Code!",
    "section": "Bonus: Installing R Studio on your personal computer",
    "text": "Bonus: Installing R Studio on your personal computer\nA lot of you may want to use R on your personal computer (i.e., not on Longleaf). There may be reasons why you want to stick with Longleaf though (e.g., data should not be downloaded on personal devices, data/analysis requires a lot of memory). If you are interested in installing R and R Studio on your personal computer, you can use the below resources for help. All classes will be taught assuming you are using Longleaf though, so class time won’t be dedicated to troubleshooting R install issues on personal computers.\nIf you just want to click 2 buttons and figure it out: https://posit.co/download/rstudio-desktop/\nIf you want a more detailed install walkthrough: https://rstudio-education.github.io/hopr/starting.html",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome to How to Learn to Code!</span>"
    ]
  },
  {
    "objectID": "class1.html",
    "href": "class1.html",
    "title": "R Coding Basics",
    "section": "",
    "text": "Introduction\nIn Vince’s quote above, replace “bioinformatics” with “coding.”\nOur goal for How to Learn to Code is to familiarize students with the R programming language and RStudio environment, equip students with the skills and knowledge to wrangle, visualize, and analyze data, and to provide a foundation for more advanced coding skills.\nIn Module 1: Coding Basics, we will cover:\nCurious about what the rest of the classes will look like?",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#introduction",
    "href": "class1.html#introduction",
    "title": "R Coding Basics",
    "section": "",
    "text": "Many biologists starting out in bioinformatics tend to equate “learning bioinformatics” with “learning how to run bioinformatics software”… This is analogous to thinking “learning molecular biology” is just “learning pipetting.”\n— Vince Buffalo\n\n\n\n\n\nVariables\nReproducible environments\nRStudio IDE\nVarious R script and file formats\nR syntax\nCommenting, writing, and executing code\nFunctions\nData structures in R\nData types in R\nManipulating data types and structures\n\n\n\nModule 1: Coding Basics\nModule 2: Data Visualization\nModule 3: Data Wrangling\nModule 4: Project Management (and applying everything you’ve learned to a real-world dataset!)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#objectives-of-coding-basics-class-1",
    "href": "class1.html#objectives-of-coding-basics-class-1",
    "title": "R Coding Basics",
    "section": "Objectives of Coding Basics: Class 1",
    "text": "Objectives of Coding Basics: Class 1\n\nBe able to create a variable, define what it is, and follow good variable naming practices\nUnderstand basic data structures in R\nUnderstand basic data types in R\nPerform basic manipulations with data structures and types\nDescribe benefits of knowing how to code",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#exploring-a-dataset",
    "href": "class1.html#exploring-a-dataset",
    "title": "R Coding Basics",
    "section": "Exploring a dataset",
    "text": "Exploring a dataset\nR has a few built in datasets that we can use until we cover installing/loading packages and reading in data files. For the following examples we will use a built-in dataset in R called “iris” that has some measurements across a few species of flowers. It is one of the most popular built-in datasets in R. We will use this dataset to explore key coding concepts: variables, data types, and functions.\nFirst, let’s take a look at the dataset. You can view the dataset multiple ways. Let’s try one–copy the below line of code into your console and run it.\n\niris\n\nAs we can see, this dataset has a few columns of numbers, in addition to the species. Let’s try a few other ways to look at this dataset. As you try each method, think about what is different about each method. When would one method be more beneficial than another?\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\n#View(iris)\n\nYou are probably already thinking of questions you need the answers to in order to familiarize yourself with this dataset. What does each row represent? Each column? How many observations (rows) do we have? What is the average petal length? Think about other questions you may want to ask. Think about how you would go about answering those questions with what you already know. Maybe you’d count each row on your screen to get the number of observations, or copy the values under Petal.Length into your phone calculator to calculate the mean. By the end of this class, you’ll be able to do all those things very quickly in R!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#variables",
    "href": "class1.html#variables",
    "title": "R Coding Basics",
    "section": "Variables",
    "text": "Variables\nA variable is a named space in your computer’s memory which can be referenced and manipulated. It’s sort of a name you give “something”, and that something can be just about anything.\n\n\n\nhttps://mclark45.medium.com/variables-8d0ba47d9694\n\n\nVariables in R are created (assigned) using an arrow: &lt;- The variable name always goes on the left, and the thing being assigned to that variable on the right. For example:\n\ngreeting &lt;- \"Hello\"\nanimal &lt;- \"panda\"\nage &lt;- 51\n\nThe value something is assigned to is often referred to as the variable name. For example, the variable name of \"Hello\" is greeting . We used really basic variable names–just letters, that are real words, all lowercase. Of course, there are other ways to name variables too! Play around with variable names. Try using uppercase letters, symbols, and numbers. What works, and what doesn’t? Come up with some rules for variable naming. Here’s some variable naming ideas to get you started:\n\nGrEeTiNg &lt;- \"Hello\"\n5greeting &lt;- \"Hello\"\ngreeting.5 &lt;- \"Hello\"\ngreeting@5 &lt;- \"Hello\"\n\nNow that you know some general rules for variable naming, we can refer to the Style Guide for “proper” variable/object naming. Update your variable naming rule to include the preferred style for variable names according to the Style Guide.\nAnd now that we know how to properly name variables, assign the iris dataset to a variable!\n\niris_dataset_copy &lt;- iris",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#data-types",
    "href": "class1.html#data-types",
    "title": "R Coding Basics",
    "section": "Data types",
    "text": "Data types\nAs you probably know from your own work, data can come in many forms. You can classify dragons as either “purple” or “green” and also record the number of spines on their backs as numeric types (15, 27). Data types are important to understand in R because the type of data impacts what you can do with that data. For example, it wouldn’t make sense to calculate a mean for the dragon color, but it would for the number of back spines.\nIn R, we will focus on three basic data types that are used specify the type of data stored in a variable (there are a few more, but you probably won’t ever run into them): character, numeric, and logical.\nCharacter: A character represents a string value. This can be anything from a single letter to entire paragraphs. Examples include “a”, “B”, “c is third”, \"5\"\nNumeric: A decimal value. Examples include 1.0, 3.1415926535.\nLogical: Logical data types have only two possible values: TRUE or FALSE.\nSo far, we have learned about basic data structures (vectors, matrices, etc.) and basic data types (numeric, character, logical). Now, we want to start manipulating or doing things to them that can be helpful.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#converting-data-types",
    "href": "class1.html#converting-data-types",
    "title": "R Coding Basics",
    "section": "Converting Data Types",
    "text": "Converting Data Types\nFor example, sometimes when we read in data from a file, numbers can appear as strings of characters rather than a “numeric” type.\n\nmy_numbers &lt;- c(\"4\", \"2\", \"7\", \"10\")\nprint(my_numbers)\n\n[1] \"4\"  \"2\"  \"7\"  \"10\"\n\n\nHow can we tell? Because the numbers above are in quotations, indicating that they are of the character type and R is interpreting them as text. Before doing any math or further analysis with these data points, it’s a good idea to convert them to the numeric type first.\n\nmy_numbers &lt;- as.numeric(my_numbers)\nprint(my_numbers)\n\n[1]  4  2  7 10\n\n\nNote that the quotations are now gone. Now, we can do basic (or more advanced) calculations like the ones below.\n\n# Get minimum out of a list of values\nmin(my_numbers)\n\n[1] 2\n\n\n\n# Get maximum out of a list of values\nmax(my_numbers)\n\n[1] 10\n\n\n\n# Get average (mean) out of a list of values\nmean(my_numbers)\n\n[1] 5.75\n\n\nWe can also sort this list of values to go from smallest to largest. After doing so, the smallest value will be first in the list and the largest value will be last.\n\nmy_numbers &lt;- sort(my_numbers)\nmy_numbers\n\n[1]  2  4  7 10\n\n\nWe can reverse the order to go from largest to smallest. There is an option using the sort function to do this.\n\nmy_numbers &lt;- sort(my_numbers, decreasing = TRUE)\nmy_numbers\n\n[1] 10  7  4  2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#accessing-parts-of-a-list",
    "href": "class1.html#accessing-parts-of-a-list",
    "title": "R Coding Basics",
    "section": "Accessing parts of a list",
    "text": "Accessing parts of a list\nOne thing we’ll be doing a lot of is looking at parts of our data. For example, we might want to look at individual items in a vector. These items could be numbers or characters.\n\nmy_data &lt;- c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\nmy_data\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\"\n\n\nIn this case, let’s say I’m really interested in that “E” and want to pull it out separately from the rest of the data. I can do that with “indexing”. Here, I can tell that it’s the 5th item in the list, so I can extract it using the following:\n\nmy_data[5]\n\n[1] \"E\"\n\n\nWe can also extract multiple items. If we wanted “D”, “E”, and “F”, we can get all the values from item 4 (“D”) to item 6 (“F”).\n\nmy_data[4:6]\n\n[1] \"D\" \"E\" \"F\"\n\n\nLet’s say we forgot to include some of our data and now we want to add it to this list. We can update my_data to also include these values.\n\nmy_data &lt;- c(my_data, \"G\", \"H\", \"I\")\nmy_data\n\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\"\n\n\nBefore we move on, let’s cover creating vectors. We already did this several times above, but didn’t discuss it. Typically, we’ll want to make vectors of numbers (e.g. our data values) or vectors of characters (e.g. labels for our data). Depending on whether we use quotes or not, R will interpret them as either numeric vectors or character vectors.\n\n# Numeric vector\nnumeric_vector &lt;- c(1, 2, 3, 4, 5)\nnumeric_vector\n\n[1] 1 2 3 4 5\n\n# Character vector\ncharacter_vector &lt;- c(\"apple\", \"banana\", \"orange\")\ncharacter_vector\n\n[1] \"apple\"  \"banana\" \"orange\"\n\n\nRemember the iris dataset from earlier? Let’s return to it to cover extracting some of the rows or columns from this data.\nWe can access specific columns in one of two ways. Typically, we will want to access it by the name of the column. We do this using the name of the data frame, followed by the dollar sign, and finally the name of the column. For example:\n\niris$Petal.Length\n\n  [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n[109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n[127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n[145] 5.7 5.2 5.0 5.2 5.4 5.1\n\n\nIf we knew which column it was (or it wasn’t named), we can also use indexing. Inside the brackets, we will need to indicate which [row , column] we want from this data frame. Since we want all the rows, we will leave the “row” blank. We can see that the Petal.Length was the 3rd column.\n\niris[, 3]\n\n  [1] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 1.5 1.6 1.4 1.1 1.2 1.5 1.3 1.4\n [19] 1.7 1.5 1.7 1.5 1.0 1.7 1.9 1.6 1.6 1.5 1.4 1.6 1.6 1.5 1.5 1.4 1.5 1.2\n [37] 1.3 1.4 1.3 1.5 1.3 1.3 1.3 1.6 1.9 1.4 1.6 1.4 1.5 1.4 4.7 4.5 4.9 4.0\n [55] 4.6 4.5 4.7 3.3 4.6 3.9 3.5 4.2 4.0 4.7 3.6 4.4 4.5 4.1 4.5 3.9 4.8 4.0\n [73] 4.9 4.7 4.3 4.4 4.8 5.0 4.5 3.5 3.8 3.7 3.9 5.1 4.5 4.5 4.7 4.4 4.1 4.0\n [91] 4.4 4.6 4.0 3.3 4.2 4.2 4.2 4.3 3.0 4.1 6.0 5.1 5.9 5.6 5.8 6.6 4.5 6.3\n[109] 5.8 6.1 5.1 5.3 5.5 5.0 5.1 5.3 5.5 6.7 6.9 5.0 5.7 4.9 6.7 4.9 5.7 6.0\n[127] 4.8 4.9 5.6 5.8 6.1 6.4 5.6 5.1 5.6 6.1 5.6 5.5 4.8 5.4 5.6 5.1 5.1 5.9\n[145] 5.7 5.2 5.0 5.2 5.4 5.1\n\n\nLet’s say we didn’t care the exact measurement of the Petal.Length of these flowers. We only cared whether they were “big” or not, and let’s say that “big” is a Petal.Length of greater than 5.\n\niris$Petal.Length &gt; 5\n\n  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n [85] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [97] FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n[109]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n[121]  TRUE FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE  TRUE  TRUE\n[133]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n[145]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE\n\n\nSome of them are “big” (with values of TRUE) and many of them are “small” (with values of FALSE). We can add this information to our dataset by making another column. Similar to how we extracted this column, we can also make a new one (with a name of our choice).\n\niris$BigPetals &lt;- iris$Petal.Length &gt; 5\n\nAnd now it is added to our dataset.\n\niris\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width    Species BigPetals\n1            5.1         3.5          1.4         0.2     setosa     FALSE\n2            4.9         3.0          1.4         0.2     setosa     FALSE\n3            4.7         3.2          1.3         0.2     setosa     FALSE\n4            4.6         3.1          1.5         0.2     setosa     FALSE\n5            5.0         3.6          1.4         0.2     setosa     FALSE\n6            5.4         3.9          1.7         0.4     setosa     FALSE\n7            4.6         3.4          1.4         0.3     setosa     FALSE\n8            5.0         3.4          1.5         0.2     setosa     FALSE\n9            4.4         2.9          1.4         0.2     setosa     FALSE\n10           4.9         3.1          1.5         0.1     setosa     FALSE\n11           5.4         3.7          1.5         0.2     setosa     FALSE\n12           4.8         3.4          1.6         0.2     setosa     FALSE\n13           4.8         3.0          1.4         0.1     setosa     FALSE\n14           4.3         3.0          1.1         0.1     setosa     FALSE\n15           5.8         4.0          1.2         0.2     setosa     FALSE\n16           5.7         4.4          1.5         0.4     setosa     FALSE\n17           5.4         3.9          1.3         0.4     setosa     FALSE\n18           5.1         3.5          1.4         0.3     setosa     FALSE\n19           5.7         3.8          1.7         0.3     setosa     FALSE\n20           5.1         3.8          1.5         0.3     setosa     FALSE\n21           5.4         3.4          1.7         0.2     setosa     FALSE\n22           5.1         3.7          1.5         0.4     setosa     FALSE\n23           4.6         3.6          1.0         0.2     setosa     FALSE\n24           5.1         3.3          1.7         0.5     setosa     FALSE\n25           4.8         3.4          1.9         0.2     setosa     FALSE\n26           5.0         3.0          1.6         0.2     setosa     FALSE\n27           5.0         3.4          1.6         0.4     setosa     FALSE\n28           5.2         3.5          1.5         0.2     setosa     FALSE\n29           5.2         3.4          1.4         0.2     setosa     FALSE\n30           4.7         3.2          1.6         0.2     setosa     FALSE\n31           4.8         3.1          1.6         0.2     setosa     FALSE\n32           5.4         3.4          1.5         0.4     setosa     FALSE\n33           5.2         4.1          1.5         0.1     setosa     FALSE\n34           5.5         4.2          1.4         0.2     setosa     FALSE\n35           4.9         3.1          1.5         0.2     setosa     FALSE\n36           5.0         3.2          1.2         0.2     setosa     FALSE\n37           5.5         3.5          1.3         0.2     setosa     FALSE\n38           4.9         3.6          1.4         0.1     setosa     FALSE\n39           4.4         3.0          1.3         0.2     setosa     FALSE\n40           5.1         3.4          1.5         0.2     setosa     FALSE\n41           5.0         3.5          1.3         0.3     setosa     FALSE\n42           4.5         2.3          1.3         0.3     setosa     FALSE\n43           4.4         3.2          1.3         0.2     setosa     FALSE\n44           5.0         3.5          1.6         0.6     setosa     FALSE\n45           5.1         3.8          1.9         0.4     setosa     FALSE\n46           4.8         3.0          1.4         0.3     setosa     FALSE\n47           5.1         3.8          1.6         0.2     setosa     FALSE\n48           4.6         3.2          1.4         0.2     setosa     FALSE\n49           5.3         3.7          1.5         0.2     setosa     FALSE\n50           5.0         3.3          1.4         0.2     setosa     FALSE\n51           7.0         3.2          4.7         1.4 versicolor     FALSE\n52           6.4         3.2          4.5         1.5 versicolor     FALSE\n53           6.9         3.1          4.9         1.5 versicolor     FALSE\n54           5.5         2.3          4.0         1.3 versicolor     FALSE\n55           6.5         2.8          4.6         1.5 versicolor     FALSE\n56           5.7         2.8          4.5         1.3 versicolor     FALSE\n57           6.3         3.3          4.7         1.6 versicolor     FALSE\n58           4.9         2.4          3.3         1.0 versicolor     FALSE\n59           6.6         2.9          4.6         1.3 versicolor     FALSE\n60           5.2         2.7          3.9         1.4 versicolor     FALSE\n61           5.0         2.0          3.5         1.0 versicolor     FALSE\n62           5.9         3.0          4.2         1.5 versicolor     FALSE\n63           6.0         2.2          4.0         1.0 versicolor     FALSE\n64           6.1         2.9          4.7         1.4 versicolor     FALSE\n65           5.6         2.9          3.6         1.3 versicolor     FALSE\n66           6.7         3.1          4.4         1.4 versicolor     FALSE\n67           5.6         3.0          4.5         1.5 versicolor     FALSE\n68           5.8         2.7          4.1         1.0 versicolor     FALSE\n69           6.2         2.2          4.5         1.5 versicolor     FALSE\n70           5.6         2.5          3.9         1.1 versicolor     FALSE\n71           5.9         3.2          4.8         1.8 versicolor     FALSE\n72           6.1         2.8          4.0         1.3 versicolor     FALSE\n73           6.3         2.5          4.9         1.5 versicolor     FALSE\n74           6.1         2.8          4.7         1.2 versicolor     FALSE\n75           6.4         2.9          4.3         1.3 versicolor     FALSE\n76           6.6         3.0          4.4         1.4 versicolor     FALSE\n77           6.8         2.8          4.8         1.4 versicolor     FALSE\n78           6.7         3.0          5.0         1.7 versicolor     FALSE\n79           6.0         2.9          4.5         1.5 versicolor     FALSE\n80           5.7         2.6          3.5         1.0 versicolor     FALSE\n81           5.5         2.4          3.8         1.1 versicolor     FALSE\n82           5.5         2.4          3.7         1.0 versicolor     FALSE\n83           5.8         2.7          3.9         1.2 versicolor     FALSE\n84           6.0         2.7          5.1         1.6 versicolor      TRUE\n85           5.4         3.0          4.5         1.5 versicolor     FALSE\n86           6.0         3.4          4.5         1.6 versicolor     FALSE\n87           6.7         3.1          4.7         1.5 versicolor     FALSE\n88           6.3         2.3          4.4         1.3 versicolor     FALSE\n89           5.6         3.0          4.1         1.3 versicolor     FALSE\n90           5.5         2.5          4.0         1.3 versicolor     FALSE\n91           5.5         2.6          4.4         1.2 versicolor     FALSE\n92           6.1         3.0          4.6         1.4 versicolor     FALSE\n93           5.8         2.6          4.0         1.2 versicolor     FALSE\n94           5.0         2.3          3.3         1.0 versicolor     FALSE\n95           5.6         2.7          4.2         1.3 versicolor     FALSE\n96           5.7         3.0          4.2         1.2 versicolor     FALSE\n97           5.7         2.9          4.2         1.3 versicolor     FALSE\n98           6.2         2.9          4.3         1.3 versicolor     FALSE\n99           5.1         2.5          3.0         1.1 versicolor     FALSE\n100          5.7         2.8          4.1         1.3 versicolor     FALSE\n101          6.3         3.3          6.0         2.5  virginica      TRUE\n102          5.8         2.7          5.1         1.9  virginica      TRUE\n103          7.1         3.0          5.9         2.1  virginica      TRUE\n104          6.3         2.9          5.6         1.8  virginica      TRUE\n105          6.5         3.0          5.8         2.2  virginica      TRUE\n106          7.6         3.0          6.6         2.1  virginica      TRUE\n107          4.9         2.5          4.5         1.7  virginica     FALSE\n108          7.3         2.9          6.3         1.8  virginica      TRUE\n109          6.7         2.5          5.8         1.8  virginica      TRUE\n110          7.2         3.6          6.1         2.5  virginica      TRUE\n111          6.5         3.2          5.1         2.0  virginica      TRUE\n112          6.4         2.7          5.3         1.9  virginica      TRUE\n113          6.8         3.0          5.5         2.1  virginica      TRUE\n114          5.7         2.5          5.0         2.0  virginica     FALSE\n115          5.8         2.8          5.1         2.4  virginica      TRUE\n116          6.4         3.2          5.3         2.3  virginica      TRUE\n117          6.5         3.0          5.5         1.8  virginica      TRUE\n118          7.7         3.8          6.7         2.2  virginica      TRUE\n119          7.7         2.6          6.9         2.3  virginica      TRUE\n120          6.0         2.2          5.0         1.5  virginica     FALSE\n121          6.9         3.2          5.7         2.3  virginica      TRUE\n122          5.6         2.8          4.9         2.0  virginica     FALSE\n123          7.7         2.8          6.7         2.0  virginica      TRUE\n124          6.3         2.7          4.9         1.8  virginica     FALSE\n125          6.7         3.3          5.7         2.1  virginica      TRUE\n126          7.2         3.2          6.0         1.8  virginica      TRUE\n127          6.2         2.8          4.8         1.8  virginica     FALSE\n128          6.1         3.0          4.9         1.8  virginica     FALSE\n129          6.4         2.8          5.6         2.1  virginica      TRUE\n130          7.2         3.0          5.8         1.6  virginica      TRUE\n131          7.4         2.8          6.1         1.9  virginica      TRUE\n132          7.9         3.8          6.4         2.0  virginica      TRUE\n133          6.4         2.8          5.6         2.2  virginica      TRUE\n134          6.3         2.8          5.1         1.5  virginica      TRUE\n135          6.1         2.6          5.6         1.4  virginica      TRUE\n136          7.7         3.0          6.1         2.3  virginica      TRUE\n137          6.3         3.4          5.6         2.4  virginica      TRUE\n138          6.4         3.1          5.5         1.8  virginica      TRUE\n139          6.0         3.0          4.8         1.8  virginica     FALSE\n140          6.9         3.1          5.4         2.1  virginica      TRUE\n141          6.7         3.1          5.6         2.4  virginica      TRUE\n142          6.9         3.1          5.1         2.3  virginica      TRUE\n143          5.8         2.7          5.1         1.9  virginica      TRUE\n144          6.8         3.2          5.9         2.3  virginica      TRUE\n145          6.7         3.3          5.7         2.5  virginica      TRUE\n146          6.7         3.0          5.2         2.3  virginica      TRUE\n147          6.3         2.5          5.0         1.9  virginica     FALSE\n148          6.5         3.0          5.2         2.0  virginica      TRUE\n149          6.2         3.4          5.4         2.3  virginica      TRUE\n150          5.9         3.0          5.1         1.8  virginica      TRUE",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#functions",
    "href": "class1.html#functions",
    "title": "R Coding Basics",
    "section": "Functions",
    "text": "Functions\nA function is a block of code that does a task. It only executes that task when it is called/executed. Using a function in R always follows the same basic format:\nfunction_name(arguments)\nThe arguments are passed to the function, i.e. they are values that the function will manipulate. Functions can be built into R, included in packages, or you can write your own.\nFunctions can do very basic tasks:\n\nprint(\"Hello world!\")\n\n[1] \"Hello world!\"\n\n\nOr more complex tasks, where multiple arguments are required, each separated by a comma:\n\nsubstr(x = \"Hello world!\", start = 2, stop = 4)\n\n[1] \"ell\"\n\n\nWe have already been using functions throughout this class–some examples include sort(), min(), and max().\nWe will be using functions all the time in How to Learn to Code, but for today just know what a function is and what an argument is. Whenever you use a function, it’s important to ensure you understand what it’s doing: are you getting the expected result? Are you using the input arguments correctly? That is not only crucial for learning how to code, but how to think like a coder.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class1.html#i-already-need-help",
    "href": "class1.html#i-already-need-help",
    "title": "R Coding Basics",
    "section": "I already need help!",
    "text": "I already need help!\nSince this is a built-in dataset, we can get some help. Try running the code below:\n\n?iris\n?mean()\n\nAdding a ? before the name of a function or data frame (built-in or from a package) pulls up a help file in the Help tab of the Output pane. If you aren’t sure what a function does, this should be your first step.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R Coding Basics</span>"
    ]
  },
  {
    "objectID": "class2.html",
    "href": "class2.html",
    "title": "Applying Coding Basics",
    "section": "",
    "text": "Objectives of Coding Basics: Class 2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Applying Coding Basics</span>"
    ]
  },
  {
    "objectID": "class2.html#objectives-of-coding-basics-class-2",
    "href": "class2.html#objectives-of-coding-basics-class-2",
    "title": "Applying Coding Basics",
    "section": "",
    "text": "Be able to apply the objectives covered in Coding Basics: Class 1 to a new dataset\nIdentify and fix a bug in a code example",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Applying Coding Basics</span>"
    ]
  },
  {
    "objectID": "class2.html#your-datasets",
    "href": "class2.html#your-datasets",
    "title": "Applying Coding Basics",
    "section": "Your datasets",
    "text": "Your datasets\nThis class we will be working with the mtcars dataset. The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\nThe other dataset we will be working with is the Palmer Penguins dataset. This is not a built-in dataset, so you will need to install it. You will only need to install the package once.\n\n# this code is making sure that the correct files are installed during the project rendering\n# Students, don't worry too much about this code. It is here to make sure that our curriculum\n# book runs correcrtly, but if you are curious, feel free to ask teachers for more info. \nif(!require(\"palmerpenguins\")){\n  install.packages(\"palmerpenguins\",repos = 'http://cran.us.r-project.org')\n}\n\nrenv was unable to query available packages from the following repositories:\n- # http://cran.us.r-project.org/src/contrib -----------------------------------\nerror downloading 'http://cran.us.r-project.org/src/contrib/PACKAGES.rds' [error code 22]\nerror downloading 'http://cran.us.r-project.org/src/contrib/PACKAGES.gz' [error code 22]\nerror downloading 'http://cran.us.r-project.org/src/contrib/PACKAGES' [error code 22]\n\n\nThe following package(s) will be installed:\n- palmerpenguins [0.1.1]\nThese packages will be installed into \"~/Documents/GitHub/Rclass-DataScience/renv/library/R-4.4/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing palmerpenguins ...                 OK [linked from cache]\nSuccessfully installed 1 package in 2.9 milliseconds.\n\n\n\ninstall.packages(\"palmerpenguins\")\n\nOnce it is installed, you will need to load the package into your R environment. You will need to do this anytime you want to use a package.\n\nlibrary(palmerpenguins)\n\nYou will also need to load the penguins dataset into your R environment:\n\ndata(package = \"palmerpenguins\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Applying Coding Basics</span>"
    ]
  },
  {
    "objectID": "class2.html#todays-class",
    "href": "class2.html#todays-class",
    "title": "Applying Coding Basics",
    "section": "Today’s class",
    "text": "Today’s class\n\nCars dataset\n\nThe dataset is stored ‘under the hood’ in an object called mtcars. View the dataset. Use head() to view the first 5, 10, and 20 rows.\nAssign mtcars to a new variable of your choice.\nWhat is the data type of each column in the dataset?\nHow many rows are in the dataset? How many columns? You may need to look up how to do this! Try searching “how to get number of rows in data frame in R” in Google.\nRun str(mtcars) . What is this output telling you? How does it compare to what you found in #3 and #4?\nFor each column, find the mean, range, and median values. Are you able to do this for all columns? Why or why not?\nWhat value is in the 6th row and 10th column?\nPrint every row of the 4th column.\nPrint every column of only rows 28 to 31.\n\n\n\nPenguins dataset\n\nThe dataset is stored ‘under the hood’ in an object called penguins. View the dataset. Use head() to view the first 5, 10, and 20 rows.\nAssign penguins to a new variable of your choice.\nWhat is the data type of each column in the dataset?\nHow many rows and columns?\nFor each column, if possible, find the mean, range, and median values.\nFor columns that you cannot find the mean/range/median of, try using the table() function, e.g. table(penguis$species) . What is this telling you?\nCurrently, the bill_length and bill_depth columns are in millimeters. Create a new column with those values converted to centimeters. (HINT: look at what you did at the end of the “Accessing parts of a list” section in Class 1)\nAdd two new columns to the data frame of your choice.\nThe penguins dataset is not perfect–it has some missing values. Check the missing values in the column sex by running two functions: is.na(penguins$sex) and sum(is.na(penguins$sex)) .\n\nWhat is the difference between the two outputs?\nCompare to the result in #6.\nUse the help page for the table() function and see if you can get the output to include NAs.\n\n\n\n\nCode debugging\nYour former lab mate Weird Barbie graduated a few years ago. Before she left, she was working on some interesting analyses of the frequencies of Kens.\n\n\n\nphoto credit: Warner Bros.\n\n\nHere’s the data below, which you will not (and should not) need to change:\n\n# The data -- DO NOT EDIT \nken_data &lt;- data.frame(\n  \"ken_name\" = c(\"Ken1\", \"Ken2\", \"Ken3\", \"Ken4\", \"Ken5\", \"Ken6\", \"Ken7\", \"Allan\"),\n  \"hair_color\" = c(\"Blonde\", \"Brown\", \"Black\", \"Red\", \"Blonde\", \"Brown\", \"Black\", \"Black\"),\n  \"cowboy_hats_owned\" = c(2, 0, 1, 3, 0, 1, 2, 0),\n  \"favorite_outfit\" = c(\"Casual\", \"Formal\", \"Sporty\", \"Beachwear\", \"Formal\", \"Casual\", \"Sporty\", \"Casual\"),\n  \"age\" = c(25, 27, 26, 28, 29, 30, 26, 27),\n  \"height_cm\" = c(180, 175, 182, 178, 180, 183, 177, 175),\n  \"weight_kg\" = c(75, 70, 80, 77, 76, 78, 79, 70),\n  \"favorite_hobby\" = c(\"Surfing\", \"Reading\", \"Soccer\", \"Volleyball\", \"Painting\", \"Cooking\", \"Dancing\", \"Guitar\"),\n  \"favorite_color\" = c(\"Blue\", \"Green\", \"Red\", \"Yellow\", \"Purple\", \"Orange\", \"Pink\", \"Blue\"),\n  \"shoe_size\" = c(10, 9, 11, 10, NA, 11, 10, 9),\n  \"best_friend\" = c(\"Barbie\", \"Barbie\", \"Barbie\", \"Barbie\", \"Barbie\", \"Barbie\", \"Barbie\", NA),\n  \"is_ken\" = c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE)\n)\n\nHowever, as is typical of Weird Barbie, her code is…weird. In almost all other aspects of life, that’s OK! But when it comes to you, three years later, trying to figure out what she did…not ideal. Here’s her code below. As it’s written, there are many bugs (code errors that either return an error or return an unexpected/incorrect result), the style is inconsistent, and there is no documentation. Using what you have learned so far, fix Weird Barbie’s code: find the bugs, smash the bugs (get the code to run), change to a consistent style, and add helpful comments. You may need to consult the style guide mentioned in Class 0, help pages, and Google.\n\nstr(ken_data)\nhaed(ken_data)\n\nmean(ken_data$cowboy_hats_owned)\nhist(ken_data$cowboy_hats_owned)\nken_data$more.than.1_cowboyHat &lt;- ken_data$cowboy_hats_owned &gt; 1\nprint(paste(sum(ken_data$more.than.1_cowboyHat), \"Kens have more than 1 cowboy hat\"))\n\nrange(ken$age)\nrange(ken_data$shoe_size)\n\n\ncorrelation &lt;- cor(ken_data$height_cm, ken_data$weight_kg)\nprint(paste(\"The correlation between height and weight is\", correlation))\nplot(ken_data$height_cm, ken_data$weight_kg)\n\ntable(ken_data$best_friend)\n# looks like everyone's bff is barbie!\n\n# outfits\ntable(ken_data$favorte_outfit)\n\n\n# no allan\nrange(ken_data[1:7,5])\n\nnoAllan &lt;- ken_data[1:7,]\nalso_noAllan &lt;- noAllan &lt;- ken_data[ken_data$is_ken == TRUE,]\nrange(noAllan$shoe_size)\n\n# Are the sporty Kens taller than the other Kens?\nsporty_kens &lt;- mean( ken_data [ken_data$favorite_outfit == \"Sporty\", \"height_cm\"])\nother_kens_mean &lt;- mean(ken_data[ken_data$favorite_outfit != \"Sporty\", \"height_cm\"] )\n\nsporty_kens &gt; other_kens_mean",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Applying Coding Basics</span>"
    ]
  },
  {
    "objectID": "class3.html",
    "href": "class3.html",
    "title": "Let’s Get Plotting!",
    "section": "",
    "text": "Let’s Get Plotting!\nChoosing a plot type\nData visualizations can tell us about the relationships of different variables in a data set. There are 3 main categories of these relationships, each answering a different type of question about the data.\nThere are 2 main ways we create plots in R",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Let's Get Plotting!</span>"
    ]
  },
  {
    "objectID": "class3.html#lets-get-plotting",
    "href": "class3.html#lets-get-plotting",
    "title": "Let’s Get Plotting!",
    "section": "",
    "text": "The variation within a single variable\n\nHow do expression levels of a gene vary among patient samples?\n\nThe co-variation between a continuous and categorical variable\n\nHow does beak size compare between penguins living on different islands?\n\nThe co-variation between two continuous variables\n\nHow does trunk thickness relate to the age of a tree?\n\n\n\n\n\n\n\n\nTip 4.1: Differentiating between continuous variables and categorical variables that are represented by a number\n\n\n\n\nIf you can replace the number with a descriptor and it still makes sense, it is a categorical variable\n\nyou can tell R that this is a categorical variable by using factor() or character()\n\n\ni.e. chromosome 1 and chromosome 2 could be re-labeled as chromosome A and chromosome B or “first chromosome” and “second chromosome” without fundamentally changing the information\n\nIf you can add/subtract two values and it still makes sense, it is a continuous variable\n\ni.e. subtracting chromosome 6 - 2 = 4, this 4 doesn’t mean anything, but subtracting size 317 - 185 = 132, this means one variant is 132 bp larger than the other\n\n\n\n\nUsing base R functions (i.e. plot())\nUsing tidyverse functions (i.e. ggplot())\n\nThis requires loading the ggplot2 package with library(ggplot2)\n\n\n\nNumeric vs Numeric\nLet’s try this with a plot type you are likely very familiar with: a scatterplot\nA scatterplot looks at co-variation between 2 numeric variables, so what are 2 numeric variables we have in this dataset?\nLet’s try plotting ref.dist vs query.dist:\n\nBase R\nFor base R, the plot() function takes in vectors of x and y values to plot.\nQ: How do we extract the entire column of ref.dist and query.dist from our dataset, variants?\nA: variants$ref.dist and variants$query.dist\n\n## create a scatterplot\nplot(x = variants$ref.dist, y = variants$query.dist)\n\n\n\n\n\n\n\n\nThat’s great! But it’s not easy to understand what these x and y axes are, so let’s relabel them by changing the parameters xlab and ylab inside the plot() function call\n\n## create a scatterplot with better axes labels\nplot(x = variants$ref.dist, y = variants$query.dist,\n     xlab = \"Reference distance\", ylab = \"Query Distance\")\n\n\n\n\n\n\n\n\nGreat! We can also add a title and subtitle with main and sub, try this on your own!\nOther plot types:\n\n\n\nFunction\nPlot Type\n\n\n\n\nplot()\nscatterplot\n\n\nlines() or plot(type = \"l\")\nline plot\n\n\n\nTo plot a line on top of points, you can run lines() with the same data immediately following plot(). Notice that the line connects all points, leading to a bit of a jumbled mess. How do you think we can fix this?\n\n## line plot\nplot(x = variants$ref.dist, y = variants$query.dist,\n     xlab = \"Reference distance\", ylab = \"Query Distance\")\nlines(x = variants$ref.dist, y = variants$query.dist)\n\n\n\n\n\n\n\n\n\n\nggplot\nFor more complex layered plots, we can also use ggplot() from the ggplot2 package. “gg” stands for “grammar of graphics” and plots are built a bit like sentences with different parts building on each other.\nTo start, let’s load in the ggplot2 package. You will only need to do this once.\n\n## load the ggplot2 library\nlibrary(ggplot2)\n\nNow each time we want to make a plot, you will start by using ggplot().\n\nggplot()\n\n\n\n\n\n\n\n\nWe haven’t given this function any data, so right now we just have an empty grey box.\nThe first layer we can add is the data. ggplot() requires the name of the dataset once, then you can just use column names throughout the rest of the code instead of using dataset$var1, dataset$var2, dataset$var3 , etc.\n\nggplot(variants)\n\n\n\n\n\n\n\n\nWe still have a grey box! Although we have told the function we want to use data from the variants dataset, we didn’t tell it which data we want to use. Any time you are referencing a column name to set the position, color, size, etc. of a point, you need to wrap it inside aes(), which is short for “aesthetics”. This looks something like this:\n\nggplot(variants, aes(x = ref.dist, y = query.dist))\n\n\n\n\n\n\n\n\nMore than a grey box! Now that we know which variables we are plotting and the dataset they come from, we have the framework to add the next layer: geometry. The geometry, as you might guess, refers to what type of shapes to put on the plot. Is it a line? A point? A bar? For scatterplots, we want the data represented as points, so we will use geom_point().\nWhenever we add a ggplot layer, we will connect it to the current plot using a + sign:\n\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_point() # plot as points\n\n\n\n\n\n\n\n\nVoila! We have our scatterplot! Now we can continue adding layers to change things like the labels. Use the labs() function to change the x, y, and optionally the title and subtitle:\n\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_point() + # plot as points\n  labs(x = \"Reference Distance\",\n       y = \"Query Distance\",\n       title = \"Plot Title\",\n       subtitle = \"Plot Subtitle\")\n\n\n\n\n\n\n\n\nggplots will all follow this general formula, changing the geom for different plot types.\nOther plot types:\n\n\n\nFunction\nPlot Type\n\n\n\n\ngeom_point()\nscatterplot\n\n\ngeom_line()\nline plot\n\n\ngeom_smooth()\nline plot of smoothed averages\n\n\n\nTo plot a line on top of points, you can add a second geom, using geom_point() + geom_line().\n\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_point() + # plot as points\n  geom_line() + # plot as line\n  labs(x = \"Reference Distance\",\n       y = \"Query Distance\",\n       title = \"Plot Title\",\n       subtitle = \"Plot Subtitle\")\n\n\n\n\n\n\n\nggplot(variants, aes(x = ref.dist, y = query.dist)) +\n  geom_smooth() + # plot as smooth line\n  labs(x = \"Reference Distance\",\n       y = \"Query Distance\",\n       title = \"Plot Title\",\n       subtitle = \"Plot Subtitle\")\n\n\n\n\n\n\n\n\n\n\n\nNumeric Distribution\nSometimes we want to look at the distribution or spread of values for one continuous variable. For example, in our data, what is the distribution of sizes for our variants?\nThere are several plot types we can use to explore this question\n\n\n\nPlot Type\nBase R Function\nggplot Function\n\n\n\n\nhistogram\nhist()\ngeom_histogram()\n\n\ndensity plot\nplot(density())\ngeom_density()\n\n\nboxplot\nboxplot()\ngeom_boxplot()\n\n\nviolin plot\nnot available\ngeom_violin()\n\n\nbar plot\nbarplot(table())\ngeom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTry ?function_name() to learn more about the different parameters used to customize each function\n\n\n\nBase R\nIn base R, we can pass each plotting function the vector of values that we want to plot. In this case, we want to plot all of the values in the size column of variants, so we will pass in variants$size to our plotting functions.\n\n## histogram\nhist(variants$size)\n\n\n\n\n\n\n\n## density plot\nplot(density(variants$size))\n\n\n\n\n\n\n\n## boxplot\nboxplot(variants$size)\n\n\n\n\n\n\n\n\nTry adding labels and titles as described before.\n\n\nggplot\nIn ggplot, we start by calling the base ggplot() function with the entire dataset, variants, then we can set the aesthetics of the x value to our column of interest with aes(x = size). Then, we can add unique geoms for each plot type.\n\n## histogram\nggplot(variants, aes(x = size)) +\n  geom_histogram()\n\n\n\n\n\n\n\n## density\nggplot(variants, aes(x = size)) +\n  geom_density()\n\n\n\n\n\n\n\n## boxplot\nggplot(variants, aes(x = size)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n## violin plot\nggplot(variants, aes(x = size)) +\n  geom_violin(aes(y = 1)) \n\n\n\n\n\n\n\n# violin plots are meant to compare categories, but we can tell it we only want one plot by setting the aesthetic of `y` to the value 1\n\nTry adding labels and titles described before. You can also easily change the look of ggplots with different themes, try adding theme_ and look at the different autofill options. See more about built-in themes here and more ways to customize themes here.\n\nggplot(variants, aes(x = size)) +\n  geom_density() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nContinuous vs Categorical\nSometimes we want to see how the counts or the distribution of a continuous variable change between different categorical groups. Often, we use a barplot for this, but there are several other plot types we can use\n\n\n\n\n\n\n\n\nPlot Type\nBase R Function\nggplot Function\n\n\n\n\nbar plot\nbarplot(name = cat_var, value = cont_var)\ngeom_bar()\n\n\nboxplots\nboxplot(cont_var ~ cat_var)\ngeom_boxplot()\n\n\nviolin plots\nnot available\ngeom_violin()\n\n\n\nwhere cont_var is the continuous variable and cat_var is the categorical variable.\n\nBase R\nIn base R, if we want to plot a numeric by a categorical variable, we will use the ~ symbol to represent “by”\nFor example, if we wanted to plot size by strand, we would do\n\nboxplot(variants$size ~ variants$type)\n\n\n\n\n\n\n\n\nTo make a barplot, we have to first count how many instances there are of each category using the table() function. First, we start with subsetting our data to only the columns we are interested in, then we pass this smaller dataset into the table() function.\n\n# subset all rows, only column \"type\"\nsmallData &lt;- variants[,\"type\"]\nvariantsCount &lt;- table(smallData)\n\nThen, we use the barplot() function, setting the height of bars to the counts in the new table, and the name of the bars to the names of the table. The height of the bars is the total summed size for each variant type.\n\nbarplot(height = variantsCount, names = names(variantsCount))\n\n\n\n\n\n\n\n\n\n\nggplot\nWhen using ggplot, the total counts per category will be calculated for us. So, we can create a base plot, setting x to the categorical variable and y to the continuous variable, then add +geom_boxplot() to make a boxplot.\n\n## density\nggplot(variants, aes(x = type, y = size)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\nTo make a barplot, we need to give it a bit more information. The height of the barplot is based on certain statistics, such as sum or mean. Since these are summary statistics, we will add stat = \"summary\" and fun = \"mean\" if we want the bar height to relate to the means of each category. How does this compare to the sums?\n\n## boxplot\nggplot(variants, aes(x = type, y = size)) +\n  geom_bar(stat = \"summary\", fun = \"mean\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Let's Get Plotting!</span>"
    ]
  },
  {
    "objectID": "class3.html#additional-resources",
    "href": "class3.html#additional-resources",
    "title": "Let’s Get Plotting!",
    "section": "Additional Resources",
    "text": "Additional Resources\nTry changing the colors using one of these tutorials:\nhttp://www.sthda.com/english/wiki/wiki.php?title=ggplot2-colors-how-to-change-colors-automatically-and-manually\nhttps://www.datanovia.com/en/blog/ggplot-colors-best-tricks-you-will-love",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Let's Get Plotting!</span>"
    ]
  },
  {
    "objectID": "class4.html",
    "href": "class4.html",
    "title": "Applying Visualization Methods",
    "section": "",
    "text": "Introduction\nWelcome to Day 2 of our data visualization journey! Today, we’ll dive deeper into the world of visualizing data using the Palmer Penguins dataset. This dataset provides insights into penguins in the Palmer Archipelago, and it’s a perfect opportunity for us to practice and hone our visualization skills.\nThe Palmer Archipelago penguins. Artwork by @allison_horst.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#introduction",
    "href": "class4.html#introduction",
    "title": "Applying Visualization Methods",
    "section": "",
    "text": "This session is an opportunity to:\n\nIndependently code visualizations.\nLearn how to troubleshoot issues that arise.\nExplore data in a hands-on manner.\n\nWe will also teach several new data visualization tricks:\n\nChanging shapes of points.\nCustomizing figure legends.\nUsing facet_grid for comparing many aspects of data simultaneously.\nOther advanced plotting tricks.\n\nApproach this session with curiosity and an adventurous spirit:\n\nExperiment with different plot types.\nPlay with colors and styles.\nLet creativity guide your visual storytelling.\n\nQuestions are welcome. Let’s make some pretty pictures!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#objectives-of-data-visualization-class-2",
    "href": "class4.html#objectives-of-data-visualization-class-2",
    "title": "Applying Visualization Methods",
    "section": "Objectives of Data Visualization: Class 2",
    "text": "Objectives of Data Visualization: Class 2\n\nApply objectives from Class 1 to a new dataset\nCreate a plot from (almost) scratch, using tools (Google, Stack Overflow) to help you\nGet a feel for the differences between creating plots in Base R and ggplot.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#dataset-overview",
    "href": "class4.html#dataset-overview",
    "title": "Applying Visualization Methods",
    "section": "Dataset Overview",
    "text": "Dataset Overview\nFirst we load necessary packages. If the palmerpenguins package is not installed, we can install it by un-commenting “install.packages” below.\n\n\n\n\n\n\nTip – Suppress Package Startup Messages\n\n\n\nThe suppressPackageStartupMessages() function in R is used to prevent the display of startup messages when loading packages. This can make your R script output cleaner and more readable, especially when loading multiple packages.\n\n\n\nsuppressPackageStartupMessages(library(tidyverse))\n#install.packages('palmerpenguins')\nlibrary(palmerpenguins)\n\nThe dataset includes measurements of three penguin species: Adélie, Chinstrap, and Gentoo. The palmerpenguins package automatically loads the data into an object called penguins.\nFirst we check the data class of penguins with class(), and take a look at the first few rows using head().\n\n#what class is our data\nclass(penguins)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n  sex     year\n  &lt;fct&gt;  &lt;int&gt;\n1 male    2007\n2 female  2007\n3 female  2007\n4 &lt;NA&gt;    2007\n5 female  2007\n6 male    2007\n\n\nAs we can see, the dataset, which is a tibble/dataframe, contains many numerical (lengths, depths, and masses), and categorical (species, island, and sex) variables. It also contains a variable that could be categorical or numerical (year).",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#exploratory-questions",
    "href": "class4.html#exploratory-questions",
    "title": "Applying Visualization Methods",
    "section": "Exploratory Questions",
    "text": "Exploratory Questions\nIn this section, we will take some time to ask questions about the Palmer Penguins dataset. Asking questions is a fundamental part of data analysis, as it guides our exploration and helps us uncover interesting patterns and insights.\nConsider the different types of questions you might ask to learn more about this dataset. What questions can we answer using different data types, and what kind of plots might we use to answer them?\n\nSome example questions\nIf you are having trouble of thinking of questions on your own, here are some example questions related to different combinations of numerical or categorical variables:\n\n\n\n\n\n\nQuestions leading to numerical by numerical plots\n\n\n\n\n\n\nHow does flipper length vary with body mass among different penguin species? This question explores correlations and possible factors influencing these traits.\nIs there a relationship between the bill depth and flipper length, and does this relationship vary by species? This encourages explores multiple numerical variables and consider biological implications. Since we are comparing species, additional visualization tools like coloring points by species could aid or visualization.\n\n\n\n\n\n\n\n\n\n\nQuestions leading to categorical by numerical plot\n\n\n\n\n\n\nHow does the average body mass differ across penguin species? This question will lead to examining differences between groups.\nDoes the distribution of flipper lengths differ by the island on which the penguins were observed? This question could be answered by a visauization of several separate distributions, which could overlap with each other.\n\n\n\n\n\n\n\n\n\n\nQuestions related to one numerical variable\n\n\n\n\n\n\nWhat is the distribution of bill lengths in the Palmer Penguins dataset, and what might this tell us about their feeding habits?\nHow are body mass values distributed within each species, and what does this suggest about the health or environment of these populations?\n\n\n\n\n\n\n\n\n\n\nQuestions related to multiple categorical variables\n\n\n\n\n\n\nHow do the relationships between body mass and flipper length change over different years of data collection?\nCan we observe any noticeable trends in bill dimensions on different islands, and how do these trends compare across species?\nThese questions require the comparision of multiple categories of variables, and could be usefully displayed as separate plots side-by-side. We will use the tool facet_grid at the end of this lesson to approach such questions.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#making-plots",
    "href": "class4.html#making-plots",
    "title": "Applying Visualization Methods",
    "section": "Making plots!",
    "text": "Making plots!\n\nWarm up: numerical by numerical plots\nTo compare two numerical variables, a scatterplot is often the simplest and most effective plotting method. Here, we will compare the flipper length and body mass of our penguins. Remember, the inputs to a scatterplot are the columns of our tibble, which should be numeric, integer, or double vectors. Lets take a look at our data with head() and confirm the datatype with class().\n\nhead(penguins$flipper_length_mm)\n\n[1] 181 186 195  NA 193 190\n\nclass(penguins$flipper_length_mm)\n\n[1] \"integer\"\n\n\n\nggplotbase R\n\n\nFirst we create a simple scatterplot with x and y labels in base r.\n\n#simple ggplot plot with x and y axis labeled\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g,)) +\n  geom_point() +\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\")\n\n\n\n\n\n\n\n\nCan we compare different species in these plots? Let’s color our points based on the species.\n\n# color dots by species\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point() +\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\",\n       color = \"Species\")\n\n\n\n\n\n\n\n\n\n\nFirst we create a simple scatterplot with x and y labels in base r.\n\n#simple base r plot with x and y axis labeled\nplot(penguins$flipper_length_mm, penguins$body_mass_g,\n     xlab = \"Flipper Length (mm)\", ylab = \"Body Mass (g)\")\n\n\n\n\n\n\n\n\nCan we compare different species in these plots? Let’s color our points based on the species.\n\n# color dots by species\nplot(penguins$flipper_length_mm, penguins$body_mass_g,\n     xlab = \"Flipper Length (mm)\", ylab = \"Body Mass (g)\",\n     col = penguins$species) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy are colors specified differently in base R and ggplot?\n\n\n\n\nIn base R plotting, the color for each point is specified directly within the plot() function using the col argument. This argument can take a vector of colors, which will be applied to the points in the plot. In this example, we are passing the species information directly to the col argument to color the points based on the species.\nIn ggplot2, the aesthetics (aes) of the plot are defined within the aes() function. The color aesthetic is specified inside the aes() function to map the species variable to the colors of the points. This approach follows the grammar of graphics philosophy, where data properties are mapped to visual properties in a structured way.\nBoth methods allow us to compare different species in the plots by coloring the points based on the species. However, the ggplot2 approach is generally more flexible and powerful for creating complex visualizations.\n\n\n\n\nAnother way to change the colors in a ggplot–local aesthetics\nIn ggplot2, the aes() function is used to map data variables to visual properties (aesthetics) of the plot. The placement of the color specification can vary based on whether it is applied globally or locally.\n\nGlobal aesthetics apply to all geoms in the plot, and are added in the initial ggplot() call (or in a stand-alone aes() layer).\nLocal aesthetics apply only to the geom to which they are added.\n\nThis first plot produces the same output as our original plot.\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species)) +\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\",\n       color = \"Species\")\n\n\n\n\n\n\n\n\nIn this second plot, the local aesthetic overrides the global one.\n\nggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +\n  geom_point(aes(color = flipper_length_mm)) + # local aesthetic applied here\n  labs(x = \"Flipper Length (cm)\", y = \"Body Mass (kg)\",\n       title = \"Body Mass vs. Flipper Length\",\n       color = \"Species\")\n\n\n\n\n\n\n\n\n\n\nLet’s customize our plots!\nLet’s customize these plots some more! Here we challenge you to change the shapes of the points for each species, add a customized legend in the position of the plot we want, and change the size of the points.\nTake 5-10 minutes to try to figure out one or more of the changes we made to the plot:\n\nChange the shape of the points based on species.\nAdd custom colors for the different species.\nChange the position of the legend to make it more visually pleasing.\nAdd a subtitle to the figure.\n\nFeel free to try ggplot or base R, depending on your preference. Practice finding this information using:\n\nThe base r docs for the plot() function or ggplot2 docs\nUse Google to find informative articles online like this\nAsk a friend or instructor for help if you get stuck.\n\nFeel free to add your own touches to the figure, and experiment with changing the numbers and variables in the figure!\n\nggplotbase r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode used to make the plot–try on your own first!\n\n\n\n\n\n\n# Even more complex example with custom labels, colors, and fig legend position\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species), size = 3) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       subtitle = \"Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\") +\n  theme(legend.position = c(0.9, 0.1))\n\n#Similar figure using base R\nspecies_colors &lt;- c(\"darkorange\", \"purple\", \"cyan4\")\n\nplot(penguins$flipper_length_mm, penguins$body_mass_g,\n     xlab = \"Flipper Length (mm)\", ylab = \"Body Mass (g)\",\n     main = \"Penguin size, Palmer Station LTER\",\n     sub = \"Flipper length and body mass for Adelie, Chinstrap, and Gentoo Penguins\",\n     pch = as.numeric(penguins$species), # Assign shapes based on species\n     col = species_colors[penguins$species]) # Assign colors based on species\n\n# Add legend\nlegend(\"bottomright\", legend = levels(penguins$species),\n       col = species_colors, \n       pch = 1:3, #shape codes to legend\n       title = \"Penguin species\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#time-to-practice",
    "href": "class4.html#time-to-practice",
    "title": "Applying Visualization Methods",
    "section": "Time to practice!",
    "text": "Time to practice!\nIn this section, you’ll have the chance to make more plots on your own. We’ll display different plots with several new features to try, and you can use your plotting and researching skills to recreate them. This is a great opportunity to experiment and be creative. Remember, questions are always welcome.\n\nNumerical by categorical plots\nTry making some numerical by categorical plots on your own using this dataset! This example looks at body mass in each species, using “jittered” points. See if you can recreate this on your own!\n\n\n\n\n\n\nHint – a reminder of the basic syntax for boxplots\n\n\n\n\n\n\nggplotbase r\n\n\n\n# ggplot boxplot of body mass values in each species\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3) +\n  labs(x = \"Species\",\n       y = \"Body mass (g)\")\n\n\n\n\n\n\n\n\n\n\n\n# Base R boxplot of body mass values in each species\nboxplot(body_mass_g ~ species, data = penguins,\n        col = c(\"darkorange\", \"purple\", \"cyan4\"),\n        main = \"Body Mass by Penguin Species\",\n        xlab = \"Species\",\n        ylab = \"Body Mass (g)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplotbase r\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow to recreate this plot–try on your own first!\n\n\n\n\n\nWhat if we also want to see individual points in a distribution? We can add points with “jitter” – a small amount of random variation on the x-axis – to better visualize where the points fall.\nIn ggplot2, you can use the geom_jitter() function to add jittered points to your plot. This adds a small amount of random noise to each point, making it easier to see overlapping points.\n\n# overlay the raw data points using geom_jitter\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +\n  geom_jitter(aes(color = species), alpha = 0.5, show.legend = FALSE, \n     position = position_jitter(width = 0.2)) +\n  labs(x = \"Species\",\n       y = \"Body mass (g)\")\n\nIn base R, you can achieve a similar effect using the jitter() function. This function adds a small amount of random variation to the data points, making overlapping points more distinguishable.\n\n# Create the boxplot\nboxplot(body_mass_g ~ species, data = penguins,\n        col = c(\"darkorange\", \"purple\", \"cyan4\"),\n        main = \"Body Mass by Penguin Species\",\n        xlab = \"Species\",\n        ylab = \"Body mass (g)\")\n\n# Add overlaid points (jittered). Factor controls the width of the points\\\n#cex controls their size, and pch controls the symbol\npoints(jitter(as.numeric(penguins$species), factor = 1.5),\n       penguins$body_mass_g,\n       pch = 16, cex = 0.8)\n\n# Add custom legend (optional)\nlegend(\"bottomright\", legend = levels(penguins$species),\n       fill = c(\"darkorange\", \"purple\", \"cyan4\"),\n       title = \"Penguin species\")\n\n\n\n\n\n\nPlotting the distribution of a numerical variable\nIf we want to loot at the distribution of one numerical variable in detail, we could use a histogram. Here is an example of histograms that show us the distributions of each species, using new features like partially transparent colors and custom bar widths.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint – a reminder of the basic syntax for histograms\n\n\n\n\n\n\nggplotbase r\n\n\n\n# a simple histogram of flipper length in ggplot\nggplot(data = penguins, aes(x = bill_depth_mm)) +\n  geom_histogram() \n\n\n\n\n\n\n\n\n\n\n\n# simple histogram of flipper length\nhist(penguins$bill_depth_mm, main = \"Histogram of Penguin Bill Depth\", xlab = \"Bill Depth (mm)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow do we change bin widths for histograms?\n\n\n\n\n\n\nggplotbase r\n\n\nIn ggplot2, you can change the number of bins in a histogram using the bins argument within the geom_histogram() function. Alternatively, you can use the binwidth argument to specify the width of each bin.\n\nggplot(data = penguins, aes(x = body_mass_g)) +\n  geom_histogram(bins = 30) +\n  labs(x = \"Body Mass (g)\", y = \"Frequency\")\n\n\n\n\n\n\n\nggplot(data = penguins, aes(x = bill_depth_mm)) +\n  geom_histogram(binwidth=0.5) \n\n\n\n\n\n\n\n\n\n\nIn base R, you can change the number of bins in a histogram using the breaks argument in the hist() function. This argument allows you to specify the number of bins directly, or you can pass a vector of break points.\n\n#change the number of bins to your liking \nhist(penguins$bill_depth_mm, breaks = 30, main = \"Histogram of Penguin Bill Depth\", xlab = \"Bill Depth (mm)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nChallenge plot\nCan we find the means of these distributions and plot the means on our histograms? Additionally, can we add text to clearly display the mean values on the plot?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode for this image\n\n\n\n\n\n\n# Calculate the mean bill depth for each species\n# This requires some skills we will learn in Week 3!\nmean_depth &lt;- penguins %&gt;%\n  group_by(species) %&gt;%\n  summarize(mean_bill_depth = mean(bill_depth_mm, na.rm = TRUE))\n\n# add a line representing the mean to the histogram\nggplot(penguins, aes(x = bill_depth_mm, fill = species)) +\n  geom_histogram(aes(fill = species), alpha = 0.5, position = \"identity\") +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Flipper length (mm)\",\n     y = \"Frequency\",\n     title = \"Penguin flipper lengths\")+\n  geom_vline(data = mean_depth, aes(xintercept = mean_bill_depth),\n     color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_text(data = mean_depth, aes(x = mean_bill_depth, y = c(15,10,15),\n     label = paste(species, \"mean:\", round(mean_bill_depth, 2))),\n     color = \"black\", vjust = -0.5, \n     hjust = 0.5, size = 4)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#mini-lesson-introduction-to-facet_grid-in-ggplot2",
    "href": "class4.html#mini-lesson-introduction-to-facet_grid-in-ggplot2",
    "title": "Applying Visualization Methods",
    "section": "Mini-Lesson: Introduction to facet_grid in ggplot2",
    "text": "Mini-Lesson: Introduction to facet_grid in ggplot2\n\nBackground:\nIn data visualization, particularly when dealing with complex datasets, it’s beneficial to compare subsets of data across different categories simultaneously. ggplot2 provides various functions for creating faceted plots, with facet_grid being a prominent choice for creating grids that can help in exploring interactions between variables.\n\n\nFaceting:\nFaceting refers to the strategy of splitting one plot into multiple plots based on a factor (or factors) included in the dataset. Each plot represents a level of the factor(s) and shares the same axis scaling and grids, which makes them easy to compare.\nThe facet_grid function creates a matrix of panels defined by row and column faceting variables. The general syntax is:\n\nfacet_grid(rows ~ cols)\n\nIf we just want to facet by rows or just by columns, replace that spot with a “.”.\n\n#facet by rows\nfacet_grid(rows ~ .)\n#facet by cols\nfacet_grid(. ~ cols)\n\nLets take some of the plots we made earlier and facet them by the categorical variable year! Note that in some situations it makes more sense to facet by columns, and others by rows.\n\n# Scatter plots with facet_grid\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species), size = 3) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       subtitle = \"Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n  theme(legend.position = c(0.9, 0.1), # x and y on a relative scale (0-1)\n        plot.title.position = \"plot\",\n        plot.caption = element_text(hjust = 0, face= \"italic\"),\n        plot.caption.position = \"plot\") +\n  facet_grid(. ~ island) \n\n\n\n\n\n\n\n#Boxplots with facet_grid\nggplot(data = penguins, aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +\n  geom_jitter(aes(color = species), alpha = 0.5, show.legend = FALSE, position = position_jitter(width = 0.2)) +\n  labs(x = \"Species\",\n       y = \"Body mass (g)\") +\n  facet_grid(. ~ year) \n\n\n\n\n\n\n\n# Histograms with facet_grid for year\nggplot(penguins, aes(x = bill_depth_mm, fill = species)) +\n  geom_histogram(aes(fill = species), \n     alpha = 0.5, \n     position = \"identity\",\n     binwidth=0.5) +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Flipper length (mm)\",\n     y = \"Frequency\",\n     title = \"Penguin flipper lengths\")+\n  geom_vline(data = mean_depth, aes(xintercept = mean_bill_depth),\n     color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_text(data = mean_depth, aes(x = mean_bill_depth, y = c(10,7,5,10,7,5,10,7,5),\n     label = paste(species, \"mean:\", round(mean_bill_depth, 2))),\n     color = \"black\", vjust = -0.3, hjust = 0.5, size = 4) +\n  facet_grid(year ~ .)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#a-useful-package-to-make-your-plots-colorblind-friendly",
    "href": "class4.html#a-useful-package-to-make-your-plots-colorblind-friendly",
    "title": "Applying Visualization Methods",
    "section": "A useful package to make your plots colorblind friendly",
    "text": "A useful package to make your plots colorblind friendly\nSometimes the plots we create are pretty, but our colorblind friends cannot see the relationships we are trying to show with them. The viridis package allows you to select from several beautiful colorblind friendly palettes and easily incorporate them into ggplots using scale_color_viridis().\n\n#install.packages(\"viridis\")\nlibrary(viridis)\n# Scatter plots with facet_grid\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = flipper_length_mm, shape = species), size = 3) +\n  scale_color_viridis() + #scale_color_viridis_d is for discrete variables like species\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\",\n       color = \"Flipper length\",\n       shape = \"Penguin species\")\n\n\n\n\n\n\n\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species, shape = species), size = 3) +\n  scale_color_viridis_d(option=\"plasma\") + #try a new color scheme\n  labs(title = \"Penguin size, Palmer Station LTER\",\n       x = \"Flipper length (cm)\",\n       y = \"Body mass (kg)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#key-takeaways",
    "href": "class4.html#key-takeaways",
    "title": "Applying Visualization Methods",
    "section": "Key Takeaways:",
    "text": "Key Takeaways:\n\nPurpose-Driven Visualizations: Always have a clear idea of the relationships and insights you want to highlight with your data. This focus will help you make more intentional and impactful visualizations.\nCustomization: Don’t be afraid to experiment with different aesthetics and customization options. Small tweaks can significantly enhance the clarity and appeal of your plots.\nClarity and Simplicity: Aim for clarity in your visualizations. Make sure your plots are easy to read and interpret, with well-labeled axes, legends, and titles.\nConsistency: Maintain a consistent style across your visualizations to create a cohesive and professional look.\nIntegrity: Ensure your visualizations are honest and accurate. Avoid manipulative practices that could mislead viewers or misrepresent the data.\n\nData visualization is both an art and a science. As you continue to practice and explore different techniques, you’ll develop a deeper understanding of how to effectively communicate your data insights. Keep experimenting, learning, and refining your skills.\n\n\n\n\n\nHappy plotting!",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class4.html#some-useful-free-resources",
    "href": "class4.html#some-useful-free-resources",
    "title": "Applying Visualization Methods",
    "section": "Some useful, free resources",
    "text": "Some useful, free resources\n\nLearn how to make almost any plot type in ggplot or base r: https://r-coder.com/\nDetailed description of ggplot functions by the authors: https://ggplot2.tidyverse.org/articles/ggplot2.html\nTake a deep dive on the theory behind ggplot2: https://ggplot2-book.org/\nA cookbook with basic set up and explanations for various plot types in base r and ggplot: https://r-graphics.org/.\nFriends Don’t Let Friends Make Bad Graphs: https://github.com/cxli233/FriendsDontLetFriends",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Applying Visualization Methods</span>"
    ]
  },
  {
    "objectID": "class5.html",
    "href": "class5.html",
    "title": "Data Wrangling Basics",
    "section": "",
    "text": "What is data wrangling?",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling Basics</span>"
    ]
  },
  {
    "objectID": "class5.html#what-is-data-wrangling",
    "href": "class5.html#what-is-data-wrangling",
    "title": "Data Wrangling Basics",
    "section": "",
    "text": "Data wrangling, manipulation, or cleaning is the process of transforming data into a format that is more suitable for analysis. This can include removing missing values, changing the format of data, or combining multiple datasets.\nThere’s rarely a single way to approach any given data-wrangling problem! Expanding your “toolkit” allows you to tackle problems from different angles.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling Basics</span>"
    ]
  },
  {
    "objectID": "class5.html#objectives-of-data-wrangling-class-1",
    "href": "class5.html#objectives-of-data-wrangling-class-1",
    "title": "Data Wrangling Basics",
    "section": "Objectives of Data Wrangling: Class 1",
    "text": "Objectives of Data Wrangling: Class 1\n\nBe comfortable subsetting vectors and dataframes using both base R and tidyverse functions\nUnderstand what tidy data is and what it looks like\nUnderstand piping basics\n\n\n\n\n\n\n\nMeasure twice, cut once\n\n\n\nBefore you begin wrangling data, you should be able to:\n\nDefine how you want the data to look and why\nDocument it well so that others (and future you!) know what you did\nKnow what tools you have and how to use them",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling Basics</span>"
    ]
  },
  {
    "objectID": "class5.html#building-a-toolkit",
    "href": "class5.html#building-a-toolkit",
    "title": "Data Wrangling Basics",
    "section": "Building a toolkit",
    "text": "Building a toolkit\n\nWorking with vectors\nPulling out specific parts of a data set is important when analyzing with R. Indexing, or accessing elements, subsets data based on numeric positions in a vector. You may remember this from the first class. Some things to be aware of when indexing:\n\nIndexing uses brackets. i.e. the 5th element in a vector will be returned if you run vector[5].\nIt’s helpful for getting several elements at once, or reordering data.\n\nHere are some examples:\n\n# First, we'll make a vector to play with\nnames &lt;- c(\"rosalind\", \"marie\", \"barbara\")\n\n\n# if we print the output, we'd get:\nnames\n\n[1] \"rosalind\" \"marie\"    \"barbara\" \n\n\n\n# If we want to access the first name, we can use brackets and the position of the name in the vector:\nnames[1]\n\n[1] \"rosalind\"\n\n\n\n# This works with any position, for example the third name:\nnames[3]\n\n[1] \"barbara\"\n\n# You can index more than one position at a time too:\nnames[c(1,2)]\n\n[1] \"rosalind\" \"marie\"   \n\n# Changing the order of numbers you supply changes the order of names returned\nnames[c(2,1)]\n\n[1] \"marie\"    \"rosalind\"\n\n\n\n\nWorking with data frames\nThis works for two-dimensional structures too, like data frames and matrices. We’d just format it as: dataframe[row,column]. Let’s try it out:\n\n# Make a data frame\ndf &lt;- data.frame(\n  name = c(\"Rosalind Franklin\", \"Marie Curie\", \"Barbara McClintock\", \"Ada Lovelace\", \"Dorothy Hodgkin\", \n           \"Lise Meitner\", \"Grace Hopper\", \"Chien-Shiung Wu\", \"Gerty Cori\", \"Katherine Johnson\"),\n  field = c(\"DNA X-ray crystallography\", \"Radioactivity\", \"Genetics\", \"Computer Programming\", \"X-ray Crystallography\", \n            \"Nuclear Physics\", \"Computer Programming\", \"Experimental Physics\", \"Biochemistry\", \"Orbital Mechanics\"),\n  school = c(\"Cambridge\", \"Sorbonne\", \"Cornell\", \"University of London\", \"Oxford\", \n             \"University of Berlin\", \"Yale\", \"Princeton\", \"Washington University\", \"West Virginia University\"),\n  date_of_birth = c(\"1920-07-25\", \"1867-11-07\", \"1902-06-16\", \"1815-12-10\", \"1910-05-12\", \n                    \"1878-11-07\", \"1906-12-09\", \"1912-05-31\", \"1896-08-15\", \"1918-08-26\"),\n  working_region = c(\"Western Europe\", \"Western Europe\", \"North America\", \"Western Europe\", \"Western Europe\", \"Western Europe\", \"North America\", \"North America\", \"North America\",  \"North America\")\n)\n\n# To get the first row:\ndf[1,]\n\n               name                     field    school date_of_birth\n1 Rosalind Franklin DNA X-ray crystallography Cambridge    1920-07-25\n  working_region\n1 Western Europe\n\n# or the first column: \ndf[,1]\n\n [1] \"Rosalind Franklin\"  \"Marie Curie\"        \"Barbara McClintock\"\n [4] \"Ada Lovelace\"       \"Dorothy Hodgkin\"    \"Lise Meitner\"      \n [7] \"Grace Hopper\"       \"Chien-Shiung Wu\"    \"Gerty Cori\"        \n[10] \"Katherine Johnson\" \n\n# for specific cells: \ndf[2,3]\n\n[1] \"Sorbonne\"\n\n# We can use the column name instead of numbers:\ndf[2,\"school\"]\n\n[1] \"Sorbonne\"\n\n# We can do the same thing by using a dollar sign:\ndf$name\n\n [1] \"Rosalind Franklin\"  \"Marie Curie\"        \"Barbara McClintock\"\n [4] \"Ada Lovelace\"       \"Dorothy Hodgkin\"    \"Lise Meitner\"      \n [7] \"Grace Hopper\"       \"Chien-Shiung Wu\"    \"Gerty Cori\"        \n[10] \"Katherine Johnson\" \n\n# We can also give a list of columns\n# which return in the order provided\ndf[,c(\"school\",\"name\")]\n\n                     school               name\n1                 Cambridge  Rosalind Franklin\n2                  Sorbonne        Marie Curie\n3                   Cornell Barbara McClintock\n4      University of London       Ada Lovelace\n5                    Oxford    Dorothy Hodgkin\n6      University of Berlin       Lise Meitner\n7                      Yale       Grace Hopper\n8                 Princeton    Chien-Shiung Wu\n9     Washington University         Gerty Cori\n10 West Virginia University  Katherine Johnson\n\n\n\n\nStandard data formats and Tidy\nThat data, and most two-dimensional data sets (data frames, matrices, etc.) is often organized the similarly:\n\nEach variable is its own column\nEach observation is its own row\nEach value is a single cell.\n\n\n\n\n\n\nSource: Hadley Wickham’s R for Data Science, 1st Edition\n\n\n\n\nThis follows the tidy data style, an approach to handling data in R that aims to be clear and readable.\n\n\n\n\n\n\nTidiest Universe\n\n\n\nThe bundle of tidy-associated packages is called the tidyverse, and it’s a 🔥 hot-topic 🔥 in the R world. In fact, ggplot is a package that you have already used that is part of the tidyverse! Most data wrangling problems can be solved with tidy or base (default) R functions. This can lead to some headaches for beginners, as there are multiple ways to accomplish the same thing!\n\n\n\n\ndplyr verbs\nOne of the most popular tidyverse packages, dplyr, offers a suite of helpful and readable functions for data manipulation. Let’s get started with how it can help you see your data:\n\n\n- The library is already synchronized with the lockfile.\n\n\n\ndplyr::glimpse(df)\n\nRows: 10\nColumns: 5\n$ name           &lt;chr&gt; \"Rosalind Franklin\", \"Marie Curie\", \"Barbara McClintock…\n$ field          &lt;chr&gt; \"DNA X-ray crystallography\", \"Radioactivity\", \"Genetics…\n$ school         &lt;chr&gt; \"Cambridge\", \"Sorbonne\", \"Cornell\", \"University of Lond…\n$ date_of_birth  &lt;chr&gt; \"1920-07-25\", \"1867-11-07\", \"1902-06-16\", \"1815-12-10\",…\n$ working_region &lt;chr&gt; \"Western Europe\", \"Western Europe\", \"North America\", \"W…\n\n\nWith the glimpse function we see that this is a data frame with 3 observations and 3 variables. We can also see the type of each variable and the first few values.\n\n\n\n\n\n\nTip\n\n\n\ndplyr functions have a lot in common:\n\nThe first argument is always a data frame\nThe following arguments typically specify which columns to operate on, using the variable names (without quotes)\nThe output is always a new data frame\n\n\n\n\n\n\n\n\nSource: Joshua Ebner’s A Quick Introduction to Dplyr\n\n\n\n\nThe dplyr package has a set of functions that are used to manipulate data frames (you may see these referred to as “verbs”, and it may also be helpful to think of them as verbs performing an action on your dataframe). These functions can either act on rows (e.g. filter out specific rows by some condition) or columns (e.g. select columns XYZ). There are also functions for working with groups (e.g. group rows by what values they have in a column with group_by).\n\nrowscolumnsgroups\n\n\nThe most important verbs that operate on rows of a dataset are filter(), which changes which rows are present without changing their order, and arrange(), which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss distinct() which finds rows with unique values but unlike arrange() and filter() it can also optionally modify the columns.\nMore information about functions like this can be found here.\n\n\nThere are four important verbs that affect the columns without changing the rows: mutate() creates new columns that are derived from the existing columns, select() changes which columns are present, rename() changes the names of the columns, and relocate() changes the positions of the columns.\nMore information about functions like this can be found here.\n\n\ngroup_by allows you to create groups using more than one variable.\nsummarize works on grouped objects and allows you to calculate a single summary statistic, reducing the data frame to have a single row for each group.\nThe slice family of functions allows you to extract specific rows within each group\nMore information about functions like this can be found here.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\ndplyr verbs work great as a team!\n\n\nAlthough these were basic examples, hopefully you feel a little more confident about working with vectors, and data frames using dplyr verbs to clean and manipulate data. Happy Wrangling!\n\n\nFunctions on functions\n\nAn introduction to pipes\nData scientists often want to make many changes to their data at one time. Typically, this means using more than one function at once. However, the way we’ve been writing our scripts so far would make for some very confusing looking code.\nFor example, let’s use dplyr functions to perform two operations on our data set of scientists: filter for those born after 1900 and then arrange them by date of birth.\n\nWriting it as separate stepsCombining functions in one lineUsing pipes to clean up the code\n\n\nHere we first filter and then arrange. Note that we are creating an intermediate variable in between the steps.\n\n# Filtering for scientists born after 1900\nfiltered_data &lt;- filter(df, as.Date(date_of_birth) &gt; as.Date(\"1900-01-01\"))\n\n# Arranging the filtered data by date of birth\narranged_data &lt;- arrange(filtered_data, date_of_birth)\n\n\n\nWe can do the same thing without creating an intermediate variable. It’s more compact but can start to get confusing if we add more functions.\n\narranged_data &lt;- arrange(filter(df, as.Date(date_of_birth) &gt; as.Date(\"1900-01-01\")), date_of_birth)\n\n\n\nThe pipe operator, |&gt;, is a tool that can help make the script more readable. It allows us to pass the result of one function directly into the next. Think of it as saying, “and then..”\nLet’s dissect our goal: filter for those born after 1900 and then arrange them by date of birth.\nfilter is doing the filter for… part\narrange is doing the arrange them… part\nand the pipe, |&gt;, is going to do the and then… part.\n\n# Using pipes\narranged_data &lt;- df |&gt;\n  filter(as.Date(date_of_birth) &gt; as.Date(\"1900-01-01\")) |&gt;\n  arrange(date_of_birth)\n\nOnce you’re comfortable with this style, you should be able to read it as: Take data and then filter by DoB and then arrange by DoB. This helps keep our code both clean and readable.\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nThere are two pipe operators: |&gt; and %&gt;%. They work almost the exact same way. %&gt;% is from the magrittr package and was the only way to pipe before version R 4.1.0. You may see %&gt;%more frequently in code from previous lab members.\n\n\n\n\n\n\nPlaceholders\n\n\n\n\n\nThe Placeholder operator allows more control over where the LHS (left hand side) is placed into the RHS (right hand side) of the pipe operator.\n\n%&gt;%|&gt;\n\n\n%&gt;% uses . as its placeholder operator. In addition to this, you may use . multiple times on the RHS\n\n3 %&gt;% head(x = letters, n = .)\n\n[1] \"a\" \"b\" \"c\"\n\n3 %&gt;% sum(2, ., .)\n\n[1] 8\n\n\n\n\n|&gt; uses _ as its placeholder operator. However, the _ placeholder must only be used once and the argument must be named\n\n3 |&gt; head(x = letters, n = _)\n\n[1] \"a\" \"b\" \"c\"\n\n\n\n#3 |&gt; sum(2, _)#| #| #| #| \n\n\n#add3 &lt;- function(x, y, z) x + y + z\n#3 |&gt; add3(2, y = _, z = _)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRight Hand Side (RHS)\n\n\n\n\n\n\n%&gt;%|&gt;\n\n\n%&gt;% can take a function name on the RHS\n\nletters %&gt;% head\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n\n\n\n\nThe RHS for |&gt; must be a function with ()\n\n#letters |&gt; head\n\n\nletters |&gt; head()\n\n[1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnonymous Functions\n\n\n\n\n\n\n%&gt;%|&gt;\n\n\n%&gt;% can take expressions in curly braces {}\n\nx &lt;- 10\n5 %&gt;% {x + .}\n\n[1] 15\n\n\n\n\n|&gt; must have a function call on RHS\n\n#x &lt;- 10\n#5 |&gt; {x + _}\n\n\n5 |&gt; {function(y) x + y}()\n\n[1] 15\n\n\n\n\n\n\n\n\nTo summarize, %&gt;% is slightly more lenient than |&gt; when it comes to the Placeholder operator, the Right Hand Side (RHS) and Anonymous functions.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling Basics</span>"
    ]
  },
  {
    "objectID": "class5.html#case-study-introduction",
    "href": "class5.html#case-study-introduction",
    "title": "Data Wrangling Basics",
    "section": "Case Study Introduction",
    "text": "Case Study Introduction\nJust reading about ways to manipulate data can be hard to understand without an application. Since this course is geared towards biomedical sciences, we thought you might find it easier if we work through an actual research data set.\nFor this example, we have some data from an experiment that measured the proportions of different cell times within mouse cardiac tissue. These samples are from treatment vs. control and WT (wild type) vs. mutant.\nWhat are some things that we, as researchers, would want to know about our data?\n\nDid the experiment work?\n\n\n\n\n\n\n\nThings to consider:\n\n\n\nCheck your controls or expected features!\n\n\n\nDo we see differences between our experimental groups?\n\nTo get at these questions, we need to be able to manipulate our data into the formats needed to check those features and for plotting. To start, lets take a look at how the results are structured before we start planning how to do the processing.\n\nGetting familiar with the data\n\noptions(digits = 3)\n# Load the data. The sample IDs were stored as the first row, so lets make those the row.names\ncell_props &lt;- read.csv(\"data/wrangling-files/cellProportions.csv\",\n                       row.names = 1)\n\nhead(cell_props)\n\n            Cardiomyocytes Fibroblast Endothelial.Cells Macrophage\nwhole_2              0.652     0.0886           0.06700     0.1761\nfraction_13          0.824     0.0370           0.06387     0.0692\nfraction_12          0.895     0.0213           0.04436     0.0390\nfraction_19          0.000     0.9983           0.00167     0.0000\nfraction_18          0.000     1.0000           0.00000     0.0000\nwhole_16             0.820     0.0208           0.08889     0.0501\n            Pericytes.SMC\nwhole_2           0.01672\nfraction_13       0.00558\nfraction_12       0.00000\nfraction_19       0.00000\nfraction_18       0.00000\nwhole_16          0.02058\n\n\n\n\n\n\n\n\nWhole vs. Fractions\n\n\n\nFraction samples are our controls. They are supposed to be almost completely one single cell type. They’re just here to make sure we accurately measured cell type proportions.\nWhole samples are our test samples. They’re from the treatment/control mice, which you’d expect to have a range of cell types.\n\n\n\n\nAnalysis Goals\nFor next class, you should brainstorm some ideas for how to approach the analysis. Try to consider these angles:\n\nWhat do we want to know about this data set?\nWhat kind of visuals would we want to make to check that?\nWhat would the data need to look like to get those visuals?\nHow does the data look now?\nWhich functions might we use to get the data from its current state to what we need for plotting?\n\nIn the beginning of next class, we’ll chat about what ideas you had!\n(Ambitious students who want to try before then will also need the phenotype data located at data/wrangling-files/cellPhenotypes.csv)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Data Wrangling Basics</span>"
    ]
  },
  {
    "objectID": "class6.html",
    "href": "class6.html",
    "title": "Data Wrangling with Real Experimental Data",
    "section": "",
    "text": "Objectives of Data Wrangling: Class 2",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Wrangling with Real Experimental Data</span>"
    ]
  },
  {
    "objectID": "class6.html#objectives-of-data-wrangling-class-2",
    "href": "class6.html#objectives-of-data-wrangling-class-2",
    "title": "Data Wrangling with Real Experimental Data",
    "section": "",
    "text": "Be able to apply the objectives covered in Data Wrangling: Class 1 to a new dataset",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Wrangling with Real Experimental Data</span>"
    ]
  },
  {
    "objectID": "class6.html#case-study",
    "href": "class6.html#case-study",
    "title": "Data Wrangling with Real Experimental Data",
    "section": "Case Study",
    "text": "Case Study\nLast class, we had introduced a dataset/experiment that we would work through. Let’s remind ourselves of some of the details:\n\nWe have proportions of cell types across samples\nThere controls made of mostly pure cell types (fractions) and experimental samples (whole)\nThere are .csv files for both the cell type proportion data and the sample phenotypes\n\nThere are a few things to think about when wrangling/exploring data:\n\nWhat do you want to know about this data?\nWhat kind of visuals would you want to make?\nHow does the data need to be formatted to get those visuals?\nWhat are some expected features of our data?\n\nTake a moment to talk among yourselves about this/any ideas you had since last class!\n\nGetting familiar with the data\n\nProportions Data\n\n# Load the data. The sample IDs were stored as the first row, so lets make those the row.names\ncell_props &lt;- read.table(\"https://raw.githubusercontent.com/How-to-Learn-to-Code/Rclass-DataScience/main/data/wrangling-files/cellProportions.csv\",\n                       row.names = 1, header = TRUE, sep = \",\")\n\nhead(cell_props)\n\n            Cardiomyocytes Fibroblast Endothelial.Cells Macrophage\nwhole_2              0.652     0.0886           0.06700     0.1761\nfraction_13          0.824     0.0370           0.06387     0.0692\nfraction_12          0.895     0.0213           0.04436     0.0390\nfraction_19          0.000     0.9983           0.00167     0.0000\nfraction_18          0.000     1.0000           0.00000     0.0000\nwhole_16             0.820     0.0208           0.08889     0.0501\n            Pericytes.SMC\nwhole_2           0.01672\nfraction_13       0.00558\nfraction_12       0.00000\nfraction_19       0.00000\nfraction_18       0.00000\nwhole_16          0.02058\n\n\n\n\n\n\n\n\nTip\n\n\n\nOur data fits the tidy style, since each row is a sample (observation) and each column is a different cell type (variable).\n\n\nWhen assessing data, it’s good to consider what features you’d expect from a given data set. This helps you know if something has gone wrong before you’ve gotten your hands on it.\nWe’re looking at the proportion of cell types in each sample, which should sum up to 1. Checking that the values in each row add to 1 would help confirm that we have what we’re expecting:\n\nrowSums(cell_props)\n\n    whole_2 fraction_13 fraction_12 fraction_19 fraction_18    whole_16 \n          1           1           1           1           1           1 \n   whole_15    whole_12 fraction_14     whole_8    whole_14     whole_3 \n          1           1           1           1           1           1 \n fraction_9 fraction_11     whole_6 fraction_16  fraction_8     whole_4 \n          1           1           1           1           1           1 \n fraction_5  fraction_1    whole_10 fraction_10     whole_7     whole_5 \n          1           1           1           1           1           1 \n    whole_9  fraction_6  fraction_3 fraction_17     whole_1    whole_13 \n          1           1           1           1           1           1 \n fraction_7  fraction_4    whole_11 fraction_20  fraction_2 fraction_15 \n          1           1           1           1           1           1 \n\n\n\n\n\n\n\n\nTip\n\n\n\nRaw RNA-seq matrices should go up to 100,000s. So if you only see small numbers in the data, it’s likely been manipulated in some way.\n\n\n\n\nPhenotype data\nWe also have the phenotypes for the samples in a separate file:\n\ncell_phenos &lt;- read.table(\"https://raw.githubusercontent.com/How-to-Learn-to-Code/Rclass-DataScience/main/data/wrangling-files/cellPhenotypes.csv\",\n                        row.names = 1,sep = \",\",header = TRUE)\n\nstr(cell_phenos)\n\n'data.frame':   36 obs. of  3 variables:\n $ type     : chr  \"purified_cardiomyocytes\" \"purified_cardiomyocytes\" \"purified_cardiomyocytes\" \"purified_cardiomyocytes\" ...\n $ genotype : chr  NA NA NA NA ...\n $ treatment: chr  NA NA NA NA ...\n\n\n”\n\n\n\nPlanning the analysis\nWe want to know:\n\nIf the controls look as we’d expect\nWhat group differences there are\n\nTo get at the question about controls, we’d need to check cell_phenos to see which samples are from the control or experimental groups. After, we’ll plot the proportions.\n\n\n\n\n\nflowchart LR\nA[Data frame of\\n cell proportions] --&gt; C(Merged proportions\\n and phenotypes)\nB[Data frame of\\n sample phenotypes]  --&gt; C\nC --&gt; D{Steps to get data\\nformatted for plotting}\nD --&gt; E[Plot of control samples]\nD --&gt; F[Plot of experiment samples]\n\n\n\n\n\n\n\n\nManipulating data frames\n\nSummarizing and subsetting\nLet’s get more context on what’s in the data. table is a convenient way to summarize columns and lists:\n\n# What unique values and how many of each are in the \"genotype\" field\ntable(cell_phenos$genotype)\n\n\ncmAKO    WT \n    8     8 \n\n# Table can also compare two variables. useNA need to be added to include cells with NAs\ntable(cell_phenos$type, cell_phenos$genotype,  useNA = \"ifany\")\n\n                            \n                             cmAKO WT &lt;NA&gt;\n  purified_cardiomyocytes        0  0    9\n  purified_endothelial_cells     0  0    3\n  purified_fibroblasts           0  0    8\n  whole_tissue                   8  8    0\n\n\nSeems that the purified cell types list NA for their genotype and that there are three types. Also, we have 8 knock-outs and 8 are wild type.\n\n\nCombining and reordering\nData frames can be combined in a bunch of ways, but no matter the method it is essential that the order of samples match. R has two built-in methods, binds (cbind and rbind) and merge.\n\n\n\n\n\nCaptain Planet and the Planeteers likely combined using merge functions\n\n\n\n\nBinds slap two data frames together. cbind adds columns, rbind adds rows. Binds don’t consider the order of the data sets, so there’s a risk of things being out of order.\nmerge is similar to cbind, but matches the data sets based on a common column.\n\ncbind\n\n# bind the rownames to see if they match\ncbind(rownames(cell_phenos), rownames(cell_props)) |&gt; head()\n\n     [,1]         [,2]         \n[1,] \"fraction_1\" \"whole_2\"    \n[2,] \"fraction_2\" \"fraction_13\"\n[3,] \"fraction_3\" \"fraction_12\"\n[4,] \"fraction_4\" \"fraction_19\"\n[5,] \"fraction_5\" \"fraction_18\"\n[6,] \"fraction_6\" \"whole_16\"   \n\n\nAbove, you can see that cbind would mismatch the samples. Always be careful when using cbind! It has no guardrails for ordering!\n\n# Reorder one to match the other\n# This uses the cell_phenos rownames as a list to specify the order of indices \ncell_props &lt;- cell_props[rownames(cell_phenos),]\n\n# They should all be TRUE now\nall(rownames(cell_phenos) == rownames(cell_props))\n\n[1] TRUE\n\n# Now we can merge them \ndata_bind &lt;- cbind(cell_phenos, cell_props)\n\nhead(data_bind)\n\n                              type genotype treatment Cardiomyocytes Fibroblast\nfraction_1 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.911     0.0160\nfraction_2 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.941     0.0118\nfraction_3 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.898     0.0165\nfraction_4 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.869     0.0508\nfraction_5 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.946     0.0129\nfraction_6    purified_fibroblasts     &lt;NA&gt;      &lt;NA&gt;          0.000     0.8976\n           Endothelial.Cells Macrophage Pericytes.SMC\nfraction_1            0.0398     0.0328       0.00000\nfraction_2            0.0266     0.0202       0.00000\nfraction_3            0.0446     0.0339       0.00720\nfraction_4            0.0235     0.0524       0.00434\nfraction_5            0.0215     0.0199       0.00000\nfraction_6            0.0138     0.0184       0.07029\n\n\n\n\nmerge\n\n# Specify row.names as the feature to merge by\ndata_merge &lt;- merge(cell_phenos, cell_props, by = \"row.names\")\n\nhead(data_merge)\n\n    Row.names                    type genotype treatment Cardiomyocytes\n1  fraction_1 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.911\n2 fraction_10    purified_fibroblasts     &lt;NA&gt;      &lt;NA&gt;          0.000\n3 fraction_11 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.772\n4 fraction_12 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.895\n5 fraction_13 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.824\n6 fraction_14 purified_cardiomyocytes     &lt;NA&gt;      &lt;NA&gt;          0.928\n  Fibroblast Endothelial.Cells Macrophage Pericytes.SMC\n1    0.01600            0.0398    0.03277      0.000000\n2    0.99385            0.0050    0.00114      0.000000\n3    0.06261            0.0599    0.09814      0.007635\n4    0.02127            0.0444    0.03896      0.000000\n5    0.03702            0.0639    0.06917      0.005581\n6    0.00861            0.0416    0.02198      0.000179\n\n\nWhile this won’t always be the case with merge vs. bind, its better to use merge in this scenario, since it helps keep your script interpretable.\n\n\n\n\n\n\nReproducible code\n\n\n\nIf you continue with programming, you’ll need to share your code or return to code you wrote months ago. Writing easy-to-understand scripts gives you less headache later!\n\n\n\n\n\n\nPreparing for different visualizations\nAt this point, we should ask ourselves a few questions:\n\nWhat am I trying to see about the data?\nWhat kind of plot helps us see that?\n\nTake a minute to talk as a group about how you would visualize the data!\nWhat am I trying to see about the data?\nOur samples have data on the proportions of many cell types. I’d want to easily compare all of these cell types at once, with samples/groups side-by-side.\nWhat kind of plot do we want?\nPie charts are often used to visualize percents/proportions, but its difficult to see differences between two pie charts. A stacked bar plot would be a better fit, since we’re trying to compare different sample groups.\nWhat format does my data need to be to make said plot?\nThis stacked bar plot would have:\n\nSamples on the X-axis\nCell-type proportions on the Y-axis\nColors for each cell type in each bar\n\nFor ggplot to make this our data needs to have a column for each term, but the data is spread across many columns. To solve this, we first need to understand the concepts of wide and long data.\n\nPivoting wide and long\nData is often formatted as wide or long. Our data is in a wide format, which has a single row for each sample and a column for each variable. When wide data is pivoted into a long format columns are condensed together.\n\n\n\n\n\nRoss understands the importance of converting wide and long data\n\n\n\n\nIt’s easiest to understand how pivoting works in visuals:\n\nStill imagesAnimated transition\n\n\n\n\n\n\n\nSource: Garrick Aden-Buie’s (@grrrck) Tidy Animated Verbs github.com/gadenbuie/tidyexplain\n\n\n\n\n\n\n\n\n\n\n\nSource: Garrick Aden-Buie’s (@grrrck) Tidy Animated Verbs github.com/gadenbuie/tidyexplain\n\n\n\n\n\n\n\nAs a reminder, we want to make a column of proportions values (val) and a column specifying cell types (key).\n\nlibrary(tidyverse)\n# cell types are specified with cols = and name the new column with names_to\n# values originally in those columns are going to move to a new values column, which we can name with values_to =\ndata_long &lt;- pivot_longer(data_merge, \n                          cols = c(Cardiomyocytes, Fibroblast, Endothelial.Cells, Macrophage, Pericytes.SMC), \n                          names_to = \"cell.type\", values_to = \"proportion\")\n\nstr(data_long)\n\ntibble [180 × 6] (S3: tbl_df/tbl/data.frame)\n $ Row.names : 'AsIs' chr [1:180] \"fraction_1\" \"fraction_1\" \"fraction_1\" \"fraction_1\" ...\n $ type      : chr [1:180] \"purified_cardiomyocytes\" \"purified_cardiomyocytes\" \"purified_cardiomyocytes\" \"purified_cardiomyocytes\" ...\n $ genotype  : chr [1:180] NA NA NA NA ...\n $ treatment : chr [1:180] NA NA NA NA ...\n $ cell.type : chr [1:180] \"Cardiomyocytes\" \"Fibroblast\" \"Endothelial.Cells\" \"Macrophage\" ...\n $ proportion: num [1:180] 0.9115 0.016 0.0398 0.0328 0 ...\n\n\nWe have a couple of changes:\n\nThere are two new columns, cell.type and proportion\nWe have A LOT more rows than we did originally\nThe sample IDs were coerced to a column “Row.names” that is an ‘AsIs’ character. We’ll need to correct that before we plot the data\n\n\n\nWrangling for plotting\n\nPure cell-type fraction controls\nWith our data in this format, we can make a lot of cool plots. Lets start with the bar plot we had planned.\n\ndata_long |&gt; \n  mutate(id = as.character(Row.names)) |&gt; # fix the AsIs type\n  ggplot(aes(x = id, y = proportion, fill = cell.type))+\n  geom_bar(position=\"fill\", stat=\"identity\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nmutate is a great way to modify specific parts of your data or make new columns!\n\n\nIt worked, but it looks… less than pleasing. Lets remind ourselves of what we wanted to see in the plot: groups side-by-side.\nI’d like to start by making a plot just for the controls for now. filter from the dplyr package will help separate the groups. Also, I’ll make aesthetic changes to make it easier to compare groups and nicer to look at.\n\ndata_long |&gt; \n  filter(type != \"whole_tissue\") |&gt; \n  mutate(id = as.character(Row.names)) |&gt; \n  ggplot(aes(x = id, y = proportion, fill = cell.type))+\n  geom_bar(position=\"fill\", stat=\"identity\", color = \"black\", width = 1) +\n  facet_grid(cols=vars(type), scales = \"free\") +\n  scale_fill_manual(values = c(\"#66C2A5\",\"#FC8D62\", \"#8DA0CB\", \"#E78AC3\", \"#A6D854\")) +\n  theme_minimal() +\n  theme(\n    axis.title.x = element_blank(), \n    legend.title = element_blank(),\n    legend.position = \"bottom\"\n  ) +\n  guides(x = guide_axis(angle = 45)) +\n  labs(title = \"Cell type proportions in purified control samples\",\n       y = \"Cell Type Proportion\")\n\n\n\n\n\n\n\n\nThis looks good! We can see what we expected of our control samples. Each of the fractions are made up of a single cell type. Let’s move onto the experimental samples.\n\n\nExperimental Samples\nThere are two things we should consider before we visualize differences between our experimental groups:\n\nIt would be easier to compare shifts in specific cell types if we break up the stacked bar chart so that the cell types are spread across the x-axis.\nIn our last plot, we compared samples across a single phenotypic factor: type. This time, it’s more complicated because we want to we want to compare both genotype and treatment.\n\n\ndata_long   |&gt; \n  filter(type == \"whole_tissue\") |&gt; \n  ggplot(aes(x = cell.type, y = proportion)) +\n  geom_bar(stat = \"summary\", fun = mean, width = 0.9,  color = \"black\") +\n  facet_grid(genotype ~ treatment, scales = \"free\") + \n  theme_minimal() +\n  theme(\n    axis.title.x = element_blank(), \n    legend.title = element_blank(),\n    legend.position = \"bottom\"\n  ) +\n  labs(y = \"Estimated Proportion\") +\n  scale_fill_manual(values = c(\"#66C2A5\",\"#FC8D62\", \"#8DA0CB\", \"#E78AC3\", \"#A6D854\")) +\n  guides(x = guide_axis(angle = 45))\n\n\n\n\n\n\n\n\nWe just made three major changes:\n\ncell.type is on the x-axis, not sample ids\nWe’re plotting the mean of each cell type across many samples in each group. geom_bar can do this automatically with stat = \"summary\", fun = mean,\nWe’re showing four plots at once by having facet_grid contrast them with genotype ~ treatment\n\nHowever, it may still be tough to compare across the groups. Also, only showing the mean masks any variation within groups. Lets make two more major changes to fix that:\n\nPut all of the groups into a single plot\nAdd dots for each sample onto each bar\n\nAnd to make it easier to read, let’s reorder the X-axis by most to least abundant cell types.\n\nReorder cell types\nWe can take advantage of factors to reorder, since ggplot references the order of factors when plotting.\n\n# Find the most-to-least abundant cell types\ncell.type.order &lt;- data_long |&gt; \n  filter(type == \"whole_tissue\") |&gt; \n  group_by(cell.type) |&gt; # Manipulate the data within cell-type groups\n  mutate(mean = mean(proportion)) |&gt; # make a new column that is the mean of the proportions \n  arrange(desc(mean)) |&gt; # arrange by mean proportion\n  pull(cell.type) |&gt; # pull out the cell type column as a list\n  unique() # remove duplicated values\ncell.type.order\n\n[1] \"Cardiomyocytes\"    \"Macrophage\"        \"Fibroblast\"       \n[4] \"Endothelial.Cells\" \"Pericytes.SMC\"    \n\n\n\n\nPut all groups on a single plot\nIf we combine genotype and treatment into a single variable, we can condense down to a single plot. While we’re at it, we can apply cell.type.order to make the data_long$cell.type into a factor-level column:\n\ndata_long &lt;- data_long |&gt; \n  mutate(cell.type = factor(cell.type, levels = cell.type.order),\n         Genotype_Treatment = factor(paste(genotype, \"-\", treatment), levels = c(\"WT - Sham\", \"WT - MI\", \"cmAKO - Sham\", \"cmAKO - MI\")))\n\n\n\nPlot\n\n# Generate boxplot\ndata_long  |&gt; \n  filter(type == \"whole_tissue\") |&gt; \n  ggplot(aes(x = cell.type, y = proportion, fill = Genotype_Treatment)) +\n  geom_bar(stat = \"summary\", fun = mean, width = 0.9,  color = \"black\",\n           position = position_dodge(0.9)) +\n  geom_jitter(inherit.aes = T, \n              position = position_dodge(0.9),\n              size = 2, alpha = 0.3) +\n  labs(y = \"Estimated Proportion\", \n       fill = \"Treatment\") +\n  theme(\n    axis.title.x = element_blank(), \n    legend.title = element_blank(),\n    legend.position = \"bottom\"\n  ) +\n  scale_fill_manual(values = c(\"#A6CEE3\", \"#1F78B4\", \"#FDBF6F\", \"#FF7F00\")) +\n  guides(x = guide_axis(angle = 45))",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Data Wrangling with Real Experimental Data</span>"
    ]
  },
  {
    "objectID": "class7.html",
    "href": "class7.html",
    "title": "Running a Reproducible Analysis",
    "section": "",
    "text": "8.1 Reproducible science… in-silico??",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#reproducible-science-in-silico",
    "href": "class7.html#reproducible-science-in-silico",
    "title": "Running a Reproducible Analysis",
    "section": "",
    "text": "Bioinformaticians are people too\nWe need to make sure our research is well documented and reproducible just like bench scientists\nProjects can get complex, messy, and very computationally demanding",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#how-can-computational-projects-get-derailed",
    "href": "class7.html#how-can-computational-projects-get-derailed",
    "title": "Running a Reproducible Analysis",
    "section": "8.2 How can computational projects get derailed?",
    "text": "8.2 How can computational projects get derailed?\nIt turns out that computational biologists need to be careful with how they manage their code and data. Leaving everything on your personal/lab computer comes with a lot of risk.\nYou can reduce the risk of a mishap by housing data on UNC’s cloud computing service, Longleaf, and putting your code on Github. Both of these provide you with backups that can be accessed from anywhere with the internet.\n\n\n\n\n\nThe impending destruction of their laptop doesn’t bother this dog since they use remote computing and GitHub\n\n\n\n\nDon’t think it’s worth it? Here are some moments that made UNC researchers wished they had used these tools:\n\nBroken laptops, crushed dreams“How did you make this figure from 2018?”\n\n\n“…there was a time where my computer just stopped letting me log in and needed to be wiped so if I wasn’t using Longleaf I would have lost everything. I did lose a nice powerpoint.”\n“In undergrad I was using local storage only on the desktop in my advisor’s office. There was some big failure with IT one day (tbh I still don’t know what happened) and I lost all my code”\n“Our collaborator lost the hard drive with the raw RNAseq data, dooming my first 1st author publication. His collaborator saved the day with a backup he had on Longleaf”\n\n\n“An undergrad left their code in /pine* when they went home over the summer and it got deleted, so they had to re-write their code from scratch (which delayed the project as a whole)”\n“Only having GitHub as a memory of projects I did in grad school, being able to search and find bits of code so I don’t have to rewrite them.”\n“People emailing 2 years after a paper is published asking about obscure details of simulation etc.”\n*pine was UNC’s temporary data storage space",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#good-computational-practices-101",
    "href": "class7.html#good-computational-practices-101",
    "title": "Running a Reproducible Analysis",
    "section": "8.3 Good computational practices 101",
    "text": "8.3 Good computational practices 101\nComputational projects ought to be approached with the same expectations of rigor and reproducibility expected of a bench project. This means that the work needs to be well documented, things need to be properly stored, and everything should be organized clearly enough for someone to reproduce it.\nThankfully, we’re not the first researchers to run into these problems. A whole suite of tools and services exist to manage these issues:\n\n\n\nDocumenting everything\nStoring data & getting resources\nKeeping your R project organized\n\n\n\n\ngit/GitHub\nLongleaf\nRStudio Projects",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#suffering-from-manual-version-control-git-can-help.",
    "href": "class7.html#suffering-from-manual-version-control-git-can-help.",
    "title": "Running a Reproducible Analysis",
    "section": "8.4 Suffering from manual version control? git can help.",
    "text": "8.4 Suffering from manual version control? git can help.\nWhat is version control exactly? At its core, it’s a way of keeping track of the changes made to files. Before now, you’ve probably used a system like this:\n\nBefore GitHubAfter GitHub\n\n\npaper_draft1.doc\npaper_draft2.doc\npaper_reviewed_by_john.doc\npaper_draft3_comments_incorporated.doc\npaper_final_draft.doc\npaper_final_reviewed.doc\npaper_final_submission.doc\npaper_final_submission_revised.doc\npaper_final_submission_revised_v2.doc\npaper_published_version.doc\n\n\n\n\n\nCharlie explains how his file naming system makes perfect sense\n\n\n\n\n\n\nWith git, you can update a file while keeping a detailed log of the changes.\n* 9a2b3c4 - Add published version of the paper (2024-04-29)\n* 8f7e6d5 - Revise submission after additional feedback, version 2 (2024-04-25)\n* 7d6c5b4 - Update submission based on post-submission feedback (2024-04-20)\n* 6c5b4a3 - Prepare final version for submission (2024-04-15)\n* 5b4a392 - Finalize draft after thorough review (2024-04-10)\n* 4a39881 - Incorporate feedback from final review (2024-04-05)\n* 3928717 - Update draft, incorporate feedback from John (2024-04-01)\n* 2871606 - Add second draft of the paper (2024-03-28)\n* 1760505 - Initial draft of the paper (2024-03-25)\n\n\n\n\n\nKevin, age 6, finds GitHub to be totally radical\n\n\n\n\n\n\n\n\n8.4.1 Go on, git!\ngit is version control system used to record changes to files. GitHub uses git to help users host/review code and manage projects\ngit/GitHub matter because they:\n\nTrack every version of every script\nPublicly document your work\nAllow for new versions of projects to branch\nMake it easy to collaborate",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#longleaf-the-darling-of-unc-bioinformaticians",
    "href": "class7.html#longleaf-the-darling-of-unc-bioinformaticians",
    "title": "Running a Reproducible Analysis",
    "section": "8.5 Longleaf: The darling of UNC bioinformaticians",
    "text": "8.5 Longleaf: The darling of UNC bioinformaticians\nLongleaf is UNC’s high-performance computing cluster (HPC). It’s basically a ton of computers/storage. Its accessible from anywhere with internet and offers a lot of storage. Labs typically start with 40 TB, users get 10 TB. Also you’ve been using it this whole time! RStudio OnDemand is hosted by Longleaf.\n\n\n\n\n\n\nTip\n\n\n\nThere are a ton of reasons to use LL:\n\nMany scripts can be run at once, with your computer off\nIt has A LOT more resources than a typical computer\nEasy to share files!\nDedicated technical support via ITS",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#connecting-longleaf-and-github",
    "href": "class7.html#connecting-longleaf-and-github",
    "title": "Running a Reproducible Analysis",
    "section": "8.6 Connecting Longleaf and Github",
    "text": "8.6 Connecting Longleaf and Github\nGithub and Longleaf each can be daunting to novice programmers, so lets walk through how to set them up together.\nThe setup is going to amount to three general steps:\n\nIntroduce our Github and Longleaf accounts to each other with something called a SSH key\n\nSSH keys (secure shell) are encrypted passwords that link two computer systems\n\nMake our first repository (project) on Github\nLearn how to get scripts from Github to Longleaf and update changes we made on Longleaf back to Github\n\nBefore we can start that, we’re going to need to know just a tad about terminals and Bash. These topics could be a whole course onto itself, but in a nutshell you can think of them like this:\nTerminals, also called command lines, are text-based software for interacting with your computer. RStudio has a built-in terminal, on the tab next to “Console”.\nBash is a type of computer language that understands and carries out the instructions you type in the terminal, usually called “shell scripting”. It’s very common on Linux and Mac computers. Longleaf uses Linux and working on Longleaf means using a bit of Bash.\n\n\n\n\n\n\nTip\n\n\n\nThis course isn’t meant to teach you shell scripting, and you aren’t expected to fully understand some of the Bash command we’ll run. If you’d like to learn more, please refer to the following cheat sheets on common bash commands and scripting in bash as helpful resources!",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#linking-via-ssh",
    "href": "class7.html#linking-via-ssh",
    "title": "Running a Reproducible Analysis",
    "section": "8.7 Linking via SSH",
    "text": "8.7 Linking via SSH\nLet’s start by getting the terminal open. In the top left, click View -&gt; Move Focus To Terminal. It should’ve opened in the panel that also contains tabs for “Console” and “Background Jobs”.\nNext, let’s find the SSH key associated with your Longleaf account. We’ll run the following bash command in the terminal that we just opened (be aware that terminals are notoriously finicky with copy and paste): cat ~/.ssh/id_rsa.pub\n\n\n\n\n\n\nCaution\n\n\n\nDo NOT forget to add the .pub of the above extension. RSA keys come in pairs, a private and a public version. The private key (i.e. the file that does not have the .pub extension) should NEVER be shared. Sharing your private key will allow malicious actors to interact with services that cache your public key as if they were you!\n\n\nThis (hopefully) has copied your public SSH key to your clipboard!\nNow, let’s go over to Github and set up the key.\n\nGo to profile settings on github and select the “ssh key” section\nAdd new key\nName the key (should remind you that this is the key for Longleaf)\nPaste the copied ssh key from the cat step above\nCreate!\n\nWith that done, we need to log into Github on Longleaf:\n\nGo back to the RStudio terminal\ngit config --global user.name \"your-github-username\"\n\nKeep the quotes around your username!\n\ngit config --global user.email your.email.linkedwithgithub\n\nNo quotes this time!",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#sec-repo",
    "href": "class7.html#sec-repo",
    "title": "Running a Reproducible Analysis",
    "section": "8.8 Making a repository",
    "text": "8.8 Making a repository\nGreat, we’ve connected Longleaf and Github (a herculean task for a beginner programmer!). What we’ll want to do next is make a repository (repo), which you could think of as a self-contained project folder. Let’s go back to Github:\n\nIn the “Repositories” tab of your profile, click “New”\nGive it a name, maybe “example_repo”\nClick the “Add a README file box”\nAdd a `.gitignore` with an R template\nCreate the repo!\n\nWe’ll explain the signifance of the README and .gitignore steps a bit later. For now, lets go over to our new repo on our profile. To get it onto Longleaf, we can:\n\nClick on the green “Code” box\nClick on “SSH”\nCopy the SSH right below that! It should end in `.git`\nLets create a new directory to house our experimental projects. In the terminal window of RStudio, do the following:\n\ncd ~                 #set working directory to home directory\nmkdir learning-R     #create a new directory \"learning-R\"\ncd learning-R        #set \"learning-R\" as our working directory\n\n\n\n\n\n\n\nGit Project Organization\n\n\n\n\n\nGit repositories may be cloned anywhere to your file system that makes sense to you. The above is a simple example of project organization in which we may create more repositories under the learning-R directory. Ultimately the choice is yours on how you wish to organize your git projects.\n\n\n\nNow we can clone our new github repository locally!\n\n# add what you copied in step 3 behind \"clone\".\n# Your command may look something like this\ngit clone git@github.com:&lt;username&gt;/&lt;reponame&gt;",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#rprojects",
    "href": "class7.html#rprojects",
    "title": "Running a Reproducible Analysis",
    "section": "8.9 RProjects",
    "text": "8.9 RProjects\nIn this section, we will be discussing recommendations for organization. From Section 8.8, we can see that our project is fairly empty\n.\n├── .git/\n├── .gitignore\n└── README.md\nIt is up to use to bring some organization to our project!\n\n\n\n\n\n\nNote\n\n\n\nThe hidden directory .git/ and file .gitignore will be covered in the next Section 8.10.\n\n\nOrganization can greatly improve the experience of coding. It is a way for us to show our future selves some kindness as well as anyone who may maintain our work in the future.\nBelow is an example of how we may setup directories for our project:\n.\n├── .git/\n├── .gitignore\n├── data/\n├── outputs/\n├── R/\n├── scripts/\n└── README.md\nHere, we have created 4 new directories: data/, outputs/, R/ and scripts/. These directory names imply something to the viewer about their contents and provide quick navigation.\ndata/ and outputs/ are perhaps the most self explanatory. We will reserve data for files we may read in for our analysis, and outputs as a place for us to store our results.\nR/ and scripts/ may be a bit nuanced. Perhaps the project author will keep helpful reusable R code in the R/ directory, while the scripts/ directory may be analysis workflows that are called from the command line.\nA project may, or may not, require this level of granularity. You may choose different directory names as well. However we want to maintain some level of interpretation and do not want to contradict expectations with the files within. Critically thinking about your project structure will ultimately save you time when you return to the project.\nHere are some general guidelines to follow:\nOrganization Do’s\n\nPlace files in some sort of relative structure\nUse descriptive file and directory names\nFormat dates with YYYY-MM-DD \n\nOrganization Do Not’s\n\nPlace all files at the top level of the repository\nStratifying files between too many directories \nUsing spaces in file names! \n\n\n8.9.1 README! … Please? 😢\nAs the name implies, this file is intended to be read by anyone who happens upon your repository.Think of this as extra documentation that you, as the project owner, may use to communicate aspects of the repository. Include helpful information about your project such as:\n\nA brief description of the project\nWhat is the scope of the project\n\nWhat problem does it solve?\nIntended use cases!\nExamples of what it should not be used for!\n\nHow to get started or use the project\nHow to contribute or report a bug\nProject Status: active development, stable, or abandoned\n\nIf your repository is being viewed on github.com then top level README.md is displayed like the landing page.\n\n\n\n\n\n\nTip\n\n\n\nYou may also place README.md within sub directories as well, allowing you to communicate more specific information within.\nHere are examples of what you may include in a data/README.md file\n\nexplanation of what data was collected and how it was processed.\ndocumentation of the columns of a .csv file. What the acronyms and data labels mean and how they should be interpreted.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class7.html#sec-git",
    "href": "class7.html#sec-git",
    "title": "Running a Reproducible Analysis",
    "section": "8.10 Using git",
    "text": "8.10 Using git\n\n.git/ is a hidden directory whose main function is to track your git ... commands. It is generally wise to ignore this directory.\n.gitignore uses rules to exclude files by name pattern or location\n\nDon’t upload data or large files!\n\nChanges need to be staged with git add\n\ngit add . adds all files not excluded by the .gitignore in the directory\ngit add -i opens an interactive adding session\n\nCommit staged changes with a note to your future self\n\ngit commit -m \"Hi future me, this is what I changed\"\n\n\n\n\n\n\nnote: Using vim\n\n\n\n\n\nIf you were to write\ngit commit\nand omit the -m \"your message here\" portion, git will force you to write a message by placing you into an interactive prompt. The default text editor is usually vim which may be tricky to navigate.\nTo enter edit mode, press i on your keyboard, and then you may begin writing your message. When you have finished, press ESC to exit your current command mode. To exit vim, press :wq which informs vim to write your changes and quit.\n\n\n\n\nCommits are pushed to branches\n\nFor the main branch, use git push origin main",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Running a Reproducible Analysis</span>"
    ]
  },
  {
    "objectID": "class8.html",
    "href": "class8.html",
    "title": "Practicing on Real-World Data",
    "section": "",
    "text": "Final class!\nIn the previous class, you completed the following steps:\nToday, now that you’ve been through the entire course, we want to reinforce some of the skills that you’ve learned by having you apply your knowledge to several existing datasets and go through the wrangling, analysis, and visualization process as independently as you can. By the end of this lesson, you should have a GitHub repo containing scripts for wrangling and analysis for at least one of these datasets that you can show to others (or at least have as a reference for your future self).\nFor each of these datasets (or as many as time allows), we’d like you to do some basic analysis, including the following steps:\nTo help with your analyses, we have included a project template document outlining these steps that you are welcome to use in data/project-day-2-files/example-analyses; the location of additional files are specified below.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Practicing on Real-World Data</span>"
    ]
  },
  {
    "objectID": "class8.html#final-class",
    "href": "class8.html#final-class",
    "title": "Practicing on Real-World Data",
    "section": "",
    "text": "Created a GitHub account.\nLinked your GitHub account with your Longleaf account.\nCreated and pushed your first repository to GitHub.\n\n\n\n\n\n\nCreate a directory for the analysis of this dataset, using best practices discussed in the previous class.\nLoad in the data.\nPerform some initial data exploration (What are the rows? What are the columns? How many samples does this dataset have? etc.)\nIdentify at least 1 research question that you could try to answer with this dataset.\nFormat the data in a way that allows for this analysis.\nVisualize the data in helpful ways to answer your question.\nMake your code reproducible by using GitHub.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Practicing on Real-World Data</span>"
    ]
  },
  {
    "objectID": "class8.html#datasets",
    "href": "class8.html#datasets",
    "title": "Practicing on Real-World Data",
    "section": "Datasets",
    "text": "Datasets\nThe csvs are available under in data/project-day-2-files/datasets. We have provided links to data that is publicly available for download, as well as some related publications that may give you more information about the data.\nThese datasets were chosen because we thought they represented a good variety in the different kinds of wrangling and visualization challenges you might encounter with your own data in the future: we have highlighted a few specific R skills that some of these datasets were meant to challenge you on.\n\n\n\n\n\n\nNote\n\n\n\nThe datasets are presented roughly in order of increasing wrangling complexity. Though you should have most of the basic skills you need to wrangle and analyze these datasets, we have specifically provided some code to aid you in certain wrangling tasks for some of the later datasets: see the “Analysis ideas and hints” callout for each dataset.\n\n\nFor each dataset, we have provided a description of the research question/data collection methods, metadata, and the first few lines of each dataset. Read through these descriptions and work on the dataset you find most interesting. Feel free to work with a partner!\n\n\n\n\n\n\nBut I thought this was HTLTCode, not HTLTScience!\n\n\n\nTo get the most out of today’s activities, we highly encourage you to practice going through the whole data analysis workflow as independently as you can, using your notes and practicing your Googling skills to develop your own research questions and analysis ideas for these datasets.\nThat said, we have prepared some example research questions and figures for each dataset to get everyone started, so you can decide if you’d rather focus more on coding or science-ing for each dataset. These research questions are split into “easier” and “harder” coding challenges, with “harder” challenges generally involving slightly more wrangling: all datasets have a pre-filled project template in the same location as the blank template document that will explain the code used to produce the example figures.\nThus, based on your comfort level, you can decide how much of the data analysis workflow you want to try independently today. You can:\n\nJust recreate our figures,\nDevelop your own analysis and figures to answer our research questions, or\nDevelop your own research questions, analysis, and figures.\n\n\n\n\nAvida digital evolution dataset\nRelated publications1\nSkills to practice: working with multiple files, pivoting\nBackground: The following data was generated using Avida-ED, an online educational application that allows one to study the dynamics of evolutionary processes. Digital, asexually-reproducing organisms known as “Avidians” can be placed into something akin to a virtual Petri dish to evolve in, and one can manipulate parameters such as mutation rate, resource availability, and dish size to study how those factors affect the evolution of the population.\nYour friend needs your help to analyze their Avida-Ed data. They designed a series of experiments around a mutant Avidian that gets an energy bonus when the sugar “nanose” is present and a wildtype Avidian that does not. They wanted to see how competition and resource availability affect the population dynamics of these Avidians.\nYour friend grew either the wildtype only, mutant only, or both populations together (competition) in the following 3 environments:\n\nMinimal (no additional sugars present)\nSelective (only nanose present)\nRich (nanose and additional sugars present)\n\n\n\n\nAvida experiment setup\n\n\nHelp your friend get started with some of the exploratory data analysis. What relationships can you find between genotype, competition, and resource availability?\n\n\n\n\n\n\nData overview\n\n\n\n\n\n\nData previewColumn metadata\n\n\nData for avida_wildtype.csv shown only:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nupdate\ncondition\nminimal_avg.fitness\nminimal_avg.offspring.cost\nminimal_avg.energy.acq.rate\nminimal_pop.size\nselective_avg.fitness\nselective_avg.offspring.cost\nselective_avg.energy.acq.rate\nselective_pop.size\nrich_avg.fitness\nrich_avg.offspring.cost\nrich_avg.energy.acq.rate\nrich_pop.size\n\n\n\n\n0\nwildtype-only\n0.3587786\n131\n47\n1\n0.2486772\n189\n47\n1\n0.3587786\n131\n47\n1\n\n\n1\nwildtype-only\n0.3587786\n131\n47\n1\n0.2486772\n189\n47\n1\n0.3587786\n131\n47\n1\n\n\n2\nwildtype-only\n0.3587786\n131\n47\n1\n0.2486772\n189\n47\n1\n0.3587786\n131\n47\n1\n\n\n3\nwildtype-only\n0.3587786\n131\n47\n1\n0.2486772\n189\n47\n1\n0.3587786\n131\n47\n1\n\n\n4\nwildtype-only\n0.3587786\n131\n47\n2\n0.2486772\n189\n47\n1\n0.3587786\n131\n47\n2\n\n\n5\nwildtype-only\n0.3587786\n131\n47\n2\n0.2486772\n189\n47\n1\n0.3587786\n131\n47\n2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\nValues\n\n\n\n\nupdate\ninteger\nTime elapsed\nRanges 0-300\n\n\ncondition\ncharacter\nTesting conditions (single population or competition)\nBased off csv: wildtype-only, mutant-only, competition\n\n\nmedia_avg.fitness\nnumeric\nAverage individual reproductive success in specified media\nRanges 0-1\n\n\nmedia_avg.offspring.cost\nnumeric\nAverage individual reproductive cost in specified media\n\n\n\nmedia_avg.energy.acq.rate\nnumeric\nAverage individual rate of energy acquisition from environment in specified media\n\n\n\nmedia_pop.size\ninteger\nPopulation size in specified media\nRanges 0-900\n\n\n\nAll population measurements were determined for minimal, selective, and rich media.\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis ideas and hints\n\n\n\n\n\n\nAnalysis hintsExample questionsExample figures\n\n\n\nWhich files have the pieces of data you need? Do you need to mix-and-match anything?\nThe data could be “tidier”…\n\n\n\nUse these questions to develop your own or answer them as-is. There is no “single” or “correct” way to answer to these questions, and you can refine or broaden the scope of these questions as needed.\nBolded questions have an accompanying figure and code.\n\nEasier\n\nHow does population size change over time for the wildtype (or mutant) in different medias?\nWhat is the relationship between fitness and offspring cost in competition conditions in different medias?\n\nHarder\n\nHow does the change in fitness over time compare between different treatment conditions and media types?\nWhich media type allows for the most maximal performance of the wildtype? The mutant? Competition conditions?\n\n\n\nEasier: How does population size change over time for the wildtype (or mutant) in different medias?\n\nHarder: how does the change in fitness over time compare between different treatment conditions and media types?\n\n\n\n\n\n\n\n\n\nWestern Africa Ebola public health dataset\nData source\nSkills to practice: working with dates, pivoting\nBackground: The Western African Ebola virus (EV) epidemic of 2013-2016 is the most severe outbreak of the EV disease in history. It caused major disruptions and loss of life, mainly in the republics of Guinea, Liberia, and Sierra Leone.\nHow might you depict the dynamics of this outbreak?\n\n\n\n\n\n\nData overview\n\n\n\n\n\n\nData previewColumn metadata\n\n\n\n\n\n\n\n\n\n\n\n\n\nCountry\nDate\nCumulative.no..of.confirmed..probable.and.suspected.cases\nCumulative.no..of.confirmed..probable.and.suspected.deaths\n\n\n\n\nGuinea\n2014-08-29\n648\n430\n\n\nNigeria\n2014-08-29\n19\n7\n\n\nSierra Leone\n2014-08-29\n1026\n422\n\n\nLiberia\n2014-08-29\n1378\n694\n\n\nSierra Leone\n2014-09-05\n1261\n491\n\n\nNigeria\n2014-09-05\n22\n8\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\nValues\n\n\n\n\nCountry\ncharacter\nCountry of report\n\n\n\nDate\ncharacter\nDate of report\nYYYY-MM-DD\n\n\nCumulative.no..of.confirmed..probable.and.suspected.cases\nnumeric\nCumulative number till this day\n\n\n\nCumulative.no..of.confirmed..probable.and.suspected.deaths\nnumeric\nCumulative number till this day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis ideas and hints\n\n\n\n\n\n\nAnalysis hintsExample questionsExample figures\n\n\n\nThis dataset contains data for other countries besides the three named above. For simplicity, you may want to focus on only those three regions.\nThe data could be “tidier”…\nYou can use format() to extract specific parts of a date object: e.g. if x is a date object with the format %Y-%m-%d, you can get the year with format(x, \"%Y\").\n\n\n\nUse these questions to develop your own or answer them as-is. There is no “single” or “correct” way to answer to these questions, and you can refine or broaden the scope of these questions as needed.\nBolded questions have an accompanying figure and code.\n\nEasier\n\nHow many cases and deaths in total were recorded by each country from 2014-2016?\nFor a specific year, how did the number of cases and deaths change over time for each country?\n\nHarder\n\nBy country, how did the average number of cases and death change each year?\nAre there any seasonal patterns in the average cases and deaths?\n\n\n\nEasier: How many cases and deaths in total were recorded by each country from 2014-2016?\n\nHarder: By country, how did the average number of cases and death change each year?\n\n\n\n\n\n\n\n\n\nHeat exposure in Phoenix, Arizona ecological dataset\nData source | Related publication\nSkills to practice: parsing strings, dealing with NA values\nBackground: Exposure to extreme heat is of growing concern with the rise of urbanization and ongoing climate change. Though most current knowledge about heat-health risks are known and implemented at the neighborhood level, less is known about individual experiences of heat, which can vary due to differences in access to cooling resources and activity patterns.\nTo further investigate, the Central Arizona-Pheonix Long-Term Ecological Research Program (CAP-LTER) recruited participants from 5 Pheonix-area neighborhoods to wear air temperature sensors that recorded their individually-experienced temperatures (IETs) as they went about their daily activities.\nWhat relationships can you find between individual activity, temperature, and neighborhood?\n\n\n\n\n\n\nData overview\n\n\n\n\n\n\nData previewColumn metadata\n\n\n\n\n\n\n\nSubject.ID\nperiod\ntemperature\n\n\n\n\n1A\nSat, 8pm-12am\n25.14447\n\n\n1P\nSat, 8pm-12am\n26.77962\n\n\n1E\nSat, 8pm-12am\n27.21875\n\n\n1B\nSat, 8pm-12am\n26.79175\n\n\n2N\nSat, 8pm-12am\nNA\n\n\n3A\nSat, 8pm-12am\nNA\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn\nType\nDescription\nValues\n\n\n\n\nSubject.ID\ncharacter\nSubject identifier where number (1-5) corresponds to neighborhood\n1=Coffelt, 2=Encanto-Palmcroft, 3=Garfield, 4=Thunderhill, 5=Power Ranch\n\n\nperiod\ncharacter\n4 hour measurement period\nweekday, period\n\n\ntemperature\nnumeric\n4 hour average of IET during specified period\nCelcius\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnalysis ideas and hints\n\n\n\n\n\n\nAnalysis hintsExample questionsExample figures\n\n\n\nWe recommend using functions in the stringr package from the tidyverse to parse the strings, particularly str_sub() and str_split_fixed().\n\ne.g. If you had a vector x containing a bunch of 2 character codes (XX), you could extract the first character with str_sub(x, 1, 1).\ne.g. If you had a vector x containing information in the format first-second-third, you could extract that first chunk with str_split_fixed(x, \"-\", n=3)[,1].\n\nR has some “counting” functions such as length() and n(): how could you get unique counts? Is there a single function that does that?\n\n\n\nUse these questions to develop your own or answer them as-is. There is no “single” or “correct” way to answer to these questions, and you can refine or broaden the scope of these questions as needed.\nBolded questions have an accompanying figure and code.\n\nEasier\n\nHow many participants were there for each neighborhood in the study?\nOn average, which 4-hour measurement period is the warmest? The coolest?\n\nHarder\n\nWhat was the daily average temperature for each neighborhood during the study period?\nFor a specific neighborhood on a specific day, what were all of the individual temperatures experienced for each 4-hour measurement period?\n\n\n\nEasier: How many participants were there for each neighborhood in the study?\n\nHarder: What was the daily average temperature for each neighborhood during the study period?",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Practicing on Real-World Data</span>"
    ]
  },
  {
    "objectID": "class8.html#footnotes",
    "href": "class8.html#footnotes",
    "title": "Practicing on Real-World Data",
    "section": "",
    "text": "In particular, see Lenski et al. (2003) and Smith et al. (2016).↩︎",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Practicing on Real-World Data</span>"
    ]
  }
]