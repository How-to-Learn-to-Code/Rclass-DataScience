---
title: "Example Analysis: Avida"
date: "today"
format: 
  html:
    toc: true
---

# Preamble

This script will loosely follow the template document: it is more meant for you to get an idea of one way to approach the data processing and visualization! This analysis will primarily focus on using tidyverse tools (i.e. `dplyr` and `ggplot`).

------------------------------------------------------------------------

For this dataset, the **main skills** we want you to practice are:

1.  Working with multiple datasets: to be able to work with the data in its entirety, the datasets should be combined together.
2.  Pivoting: this dataset is an example of where multiple variables are contained in the column names.

The **research questions** we will address are:

1.  Easier: How does population size change over time for the wildtype (or mutant) in different medias?
2.  Harder: How does the change in fitness over time compare between different treatment conditions and media types?

# 1. Load data and libraries

```{r}
library(tidyverse)

wt <- read.csv("~/Desktop/Rclass-DataScience/scripts/04_projects/project-day-2_files/datasets/avida/avida_wildtype.csv", header = TRUE, sep = ",")
mut <- read.csv("~/Desktop/Rclass-DataScience/scripts/04_projects/project-day-2_files/datasets/avida/avida_mutant.csv", header = TRUE, sep = ",")
comp <- read.csv("~/Desktop/Rclass-DataScience/scripts/04_projects/project-day-2_files/datasets/avida/avida_competition.csv", header = TRUE, sep = ",")
```

# 2. Format the Data

## Skill: Working with multiple datasets

For this data, it'll be easiest to work with them if we combine them together. Because they all have the same structure (same column names and number of columns), we can just use `rbind()` to stack the rows on top of each other.

```{r}
# combine
all <- rbind(wt, mut, comp)
```

::: {.callout-note title="Other approaches to combining 3+ dataframes" collapse="true"}
A tidyverse approach to combining 3+ dataframes that share common columns/rows but are not as similar to each other could be to use `reduce()` and `merge()`. Put your dataframes into a list before combining them: `reduce(list(df1, df2, df3), merge)`
:::

## Skill: Pivoting

To make our data tidy, let's extract the information about media type from the population metrics columns with `pivot_longer()`.

Because of the way the column names are similarly structured as `<media type>_<measurement>`, picking the columns we want to pivot will be straightforward, if we use `starts_with()` in the `cols` argument. We want to keep the measurement name that's already in the column, so we'll specify that in the `names_to` argument. Finally, we can use the `names_sep` argument to specify where to extract the different parts for the new column names (here, they are all separated by the underscore).

```{r}
# pivot
all <- pivot_longer(all,
                    cols = starts_with(c("minimal", "rich", "selective")),
                    names_to = c("media", ".value"), # ".value" will keep the <measurement> as the column name after pivoting
                    names_sep = "_")
```

# 3. Visualize the Data

## Easier

::: callout-note
### Research question
How does population size change over time for the wildtype (or mutant) in different medias?
:::

Since we have combined all the data already, we will select the mutant/wildtype data using `filter()` and keep them distinct with `facet_wrap()`. Otherwise, the code will be similar if you just use the `wt` or `mut` data on their own (assuming that you've used similar steps to pivot).

Because we want to show change over time, we should use a line graph.

```{r}
# plot population size
all |>
  filter(condition != "competition") |>
  ggplot(aes(x = update, y = pop.size, color = media)) +
  facet_wrap(~condition) +
  geom_line()
```


## Harder

::: callout-note
### Research question

How does the change in fitness over time compare between different treatment conditions and media types?
:::

The hardest part about this question was getting the data processed: there are no further steps to take, other than to plot.

There is a similar emphasis on time here, so we will use a line plot.

```{r}
# plot fitness
ggplot(all, aes(x = update, y = avg.fitness, color = condition)) +
  geom_line() +
  facet_wrap(~media)
```


------------------------------------------------------------------------

# Code only

::: {.callout-note collapse="true"}
## Code only

```{r eval=FALSE}
# read in data, load libraries
library(tidyverse)

wt <- read.csv("~/Desktop/Rclass-DataScience/scripts/04_projects/project-day-2_files/datasets/avida/avida_wildtype.csv", header = TRUE, sep = ",")
mut <- read.csv("~/Desktop/Rclass-DataScience/scripts/04_projects/project-day-2_files/datasets/avida/avida_mutant.csv", header = TRUE, sep = ",")
comp <- read.csv("~/Desktop/Rclass-DataScience/scripts/04_projects/project-day-2_files/datasets/avida/avida_competition.csv", header = TRUE, sep = ",")

# wrangle
## combine
all <- rbind(wt, mut, comp)

## pivot
all <- pivot_longer(all,
                    cols = starts_with(c("minimal", "rich", "selective")),
                    names_to = c("media", ".value"), # ".value" will keep the <measurement> as the column name after pivoting
                    names_sep = "_")

# visualize
## easier: plot population size for wt/mut
all |>
  filter(condition != "competition") |>
  ggplot(aes(x = update, y = pop.size, color = media)) +
  facet_wrap(~condition) +
  geom_line()

## harder: plot fitness for all 3 conditions across all media types
ggplot(all, aes(x = update, y = avg.fitness, color = condition)) +
  geom_line() +
  facet_wrap(~media)
```
:::
